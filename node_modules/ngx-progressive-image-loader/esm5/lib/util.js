/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} window
 * @return {?}
 */
export function isSupportIntersectionObserver(window) {
    return (window &&
        'IntersectionObserver' in window &&
        'IntersectionObserverEntry' in window &&
        'intersectionRatio' in window.IntersectionObserverEntry.prototype);
}
/**
 * @param {?} element
 * @return {?}
 */
export function isImagePicture(element) {
    return element instanceof HTMLImageElement || element instanceof HTMLPictureElement;
}
/**
 * @param {?} renderer
 * @param {?} attribute
 * @param {?} element
 * @return {?}
 */
export function setAttribute(renderer, attribute, element) {
    renderer.setAttribute(element, attribute, element.dataset[attribute]);
    // maybe doesn't matter
    // renderer.removeAttribute(element, 'data-' + attribute);
}
/**
 * @param {?} element
 * @return {?}
 */
export function isPictureElement(element) {
    return element.nodeName === 'PICTURE';
}
/**
 * @param {?} renderer
 * @param {?} image
 * @return {?}
 */
export function loadImage(renderer, image) {
    if (isPictureElement(image.parentElement)) {
        /** @type {?} */
        var sourceElms = image.parentElement.children;
        for (var index = 0; index < sourceElms.length; index++) {
            /** @type {?} */
            var element = sourceElms[index];
            if (element instanceof HTMLSourceElement) {
                setAttribute(renderer, 'srcset', element);
            }
            else if (element instanceof HTMLImageElement) {
                setAttribute(renderer, 'src', element);
            }
        }
    }
    else {
        if (image.dataset.src) {
            setAttribute(renderer, 'src', image);
        }
        if (image.dataset.srcset) {
            setAttribute(renderer, 'srcset', image);
        }
    }
}
/**
 * @param {?} window
 * @return {?}
 */
export function isSpider(window) {
    return ((window && !('onscroll' in window)) ||
        /(gle|ing|ro)bot|crawl|spider/i.test(window.navigator.userAgent));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wcm9ncmVzc2l2ZS1pbWFnZS1sb2FkZXIvIiwic291cmNlcyI6WyJsaWIvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVBLE1BQU0sVUFBVSw2QkFBNkIsQ0FBQyxNQUFNO0lBQ2xELE9BQU8sQ0FDTCxNQUFNO1FBQ04sc0JBQXNCLElBQUksTUFBTTtRQUNoQywyQkFBMkIsSUFBSSxNQUFNO1FBQ3JDLG1CQUFtQixJQUFJLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQ2xFLENBQUM7QUFDSixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsT0FBb0I7SUFDakQsT0FBTyxPQUFPLFlBQVksZ0JBQWdCLElBQUksT0FBTyxZQUFZLGtCQUFrQixDQUFDO0FBQ3RGLENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUMxQixRQUFtQixFQUNuQixTQUFpQixFQUNqQixPQUE2QztJQUU3QyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLHVCQUF1QjtJQUN2QiwwREFBMEQ7QUFDNUQsQ0FBQzs7Ozs7QUFDRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBb0I7SUFDbkQsT0FBTyxPQUFPLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQztBQUN4QyxDQUFDOzs7Ozs7QUFDRCxNQUFNLFVBQVUsU0FBUyxDQUFDLFFBQW1CLEVBQUUsS0FBdUI7SUFDcEUsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUU7O1lBQ25DLFVBQVUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFFBQVE7UUFDL0MsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7O2dCQUNoRCxPQUFPLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztZQUNqQyxJQUFJLE9BQU8sWUFBWSxpQkFBaUIsRUFBRTtnQkFDeEMsWUFBWSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDM0M7aUJBQU0sSUFBSSxPQUFPLFlBQVksZ0JBQWdCLEVBQUU7Z0JBQzlDLFlBQVksQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQ3hDO1NBQ0Y7S0FDRjtTQUFNO1FBQ0wsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUNyQixZQUFZLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN0QztRQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDeEIsWUFBWSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDekM7S0FDRjtBQUNILENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFNO0lBQzdCLE9BQU8sQ0FDTCxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLCtCQUErQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUNqRSxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU3VwcG9ydEludGVyc2VjdGlvbk9ic2VydmVyKHdpbmRvdykge1xyXG4gIHJldHVybiAoXHJcbiAgICB3aW5kb3cgJiZcclxuICAgICdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93ICYmXHJcbiAgICAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeScgaW4gd2luZG93ICYmXHJcbiAgICAnaW50ZXJzZWN0aW9uUmF0aW8nIGluIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZVxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ltYWdlUGljdHVyZShlbGVtZW50OiBIVE1MRWxlbWVudCkge1xyXG4gIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCB8fCBlbGVtZW50IGluc3RhbmNlb2YgSFRNTFBpY3R1cmVFbGVtZW50O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0QXR0cmlidXRlKFxyXG4gIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgYXR0cmlidXRlOiBzdHJpbmcsXHJcbiAgZWxlbWVudDogSFRNTEltYWdlRWxlbWVudCB8IEhUTUxTb3VyY2VFbGVtZW50XHJcbikge1xyXG4gIHJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUsIGVsZW1lbnQuZGF0YXNldFthdHRyaWJ1dGVdKTtcclxuICAvLyBtYXliZSBkb2Vzbid0IG1hdHRlclxyXG4gIC8vIHJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS0nICsgYXR0cmlidXRlKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNQaWN0dXJlRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xyXG4gIHJldHVybiBlbGVtZW50Lm5vZGVOYW1lID09PSAnUElDVFVSRSc7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRJbWFnZShyZW5kZXJlcjogUmVuZGVyZXIyLCBpbWFnZTogSFRNTEltYWdlRWxlbWVudCkge1xyXG4gIGlmIChpc1BpY3R1cmVFbGVtZW50KGltYWdlLnBhcmVudEVsZW1lbnQpKSB7XHJcbiAgICBjb25zdCBzb3VyY2VFbG1zID0gaW1hZ2UucGFyZW50RWxlbWVudC5jaGlsZHJlbjtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzb3VyY2VFbG1zLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICBjb25zdCBlbGVtZW50ID0gc291cmNlRWxtc1tpbmRleF07XHJcbiAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTFNvdXJjZUVsZW1lbnQpIHtcclxuICAgICAgICBzZXRBdHRyaWJ1dGUocmVuZGVyZXIsICdzcmNzZXQnLCBlbGVtZW50KTtcclxuICAgICAgfSBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCkge1xyXG4gICAgICAgIHNldEF0dHJpYnV0ZShyZW5kZXJlciwgJ3NyYycsIGVsZW1lbnQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChpbWFnZS5kYXRhc2V0LnNyYykge1xyXG4gICAgICBzZXRBdHRyaWJ1dGUocmVuZGVyZXIsICdzcmMnLCBpbWFnZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaW1hZ2UuZGF0YXNldC5zcmNzZXQpIHtcclxuICAgICAgc2V0QXR0cmlidXRlKHJlbmRlcmVyLCAnc3Jjc2V0JywgaW1hZ2UpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU3BpZGVyKHdpbmRvdykge1xyXG4gIHJldHVybiAoXHJcbiAgICAod2luZG93ICYmICEoJ29uc2Nyb2xsJyBpbiB3aW5kb3cpKSB8fFxyXG4gICAgLyhnbGV8aW5nfHJvKWJvdHxjcmF3bHxzcGlkZXIvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxyXG4gICk7XHJcbn1cclxuIl19