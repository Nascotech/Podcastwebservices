/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ProgressiveImageLoaderComponent } from '../progressive-image-loader/progressive-image-loader.component';
var ImagePlaceholderComponent = /** @class */ (function () {
    function ImagePlaceholderComponent(sanitizer, _ProgressiveImageLoader) {
        this.sanitizer = sanitizer;
        this._ProgressiveImageLoader = _ProgressiveImageLoader;
        this.class = 'ngx-image-placeholder';
    }
    Object.defineProperty(ImagePlaceholderComponent.prototype, "placeHolder", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sanitizer.bypassSecurityTrustStyle("padding-bottom: " + 100 / (this.imageRatio || this._ProgressiveImageLoader.imageRatio) + "%;");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePlaceholderComponent.prototype, "imageFilter", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sanitizer.bypassSecurityTrustStyle("" + this._ProgressiveImageLoader.filter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePlaceholderComponent.prototype, "safeLoadingImage", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sanitizer.bypassSecurityTrustUrl(this.placeholderImageSrc || this._ProgressiveImageLoader.placeholderImageSrc);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ImagePlaceholderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    ImagePlaceholderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-image-placeholder',
                    template: "\n    <img class=\"placeholder-loading-image\" [src]=\"safeLoadingImage\" [style.filter]=\"imageFilter\" />\n    <ng-content></ng-content>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    ImagePlaceholderComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: ProgressiveImageLoaderComponent }
    ]; };
    ImagePlaceholderComponent.propDecorators = {
        class: [{ type: HostBinding, args: ['class',] }],
        placeHolder: [{ type: HostBinding, args: ['style',] }],
        imageRatio: [{ type: Input }],
        placeholderImageSrc: [{ type: Input }]
    };
    return ImagePlaceholderComponent;
}());
export { ImagePlaceholderComponent };
if (false) {
    /** @type {?} */
    ImagePlaceholderComponent.prototype.class;
    /** @type {?} */
    ImagePlaceholderComponent.prototype.imageRatio;
    /** @type {?} */
    ImagePlaceholderComponent.prototype.placeholderImageSrc;
    /**
     * @type {?}
     * @private
     */
    ImagePlaceholderComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    ImagePlaceholderComponent.prototype._ProgressiveImageLoader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtcGxhY2Vob2xkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXByb2dyZXNzaXZlLWltYWdlLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9pbWFnZS1wbGFjZWhvbGRlci9pbWFnZS1wbGFjZWhvbGRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQUUsWUFBWSxFQUFhLE1BQU0sMkJBQTJCLENBQUM7QUFFcEUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sZ0VBQWdFLENBQUM7QUFFakg7SUFnQ0UsbUNBQ1UsU0FBdUIsRUFDdkIsdUJBQXdEO1FBRHhELGNBQVMsR0FBVCxTQUFTLENBQWM7UUFDdkIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFpQztRQXpCNUMsVUFBSyxHQUFHLHVCQUF1QixDQUFDO0lBMEJuRCxDQUFDO0lBekJKLHNCQUNJLGtEQUFXOzs7O1FBRGY7WUFFRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQzVDLHFCQUFtQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsT0FBSSxDQUMxRixDQUFDO1FBQ0osQ0FBQzs7O09BQUE7SUFPRCxzQkFBSSxrREFBVzs7OztRQUFmO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEtBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQVEsQ0FBQyxDQUFDO1FBQzNGLENBQUM7OztPQUFBO0lBRUQsc0JBQUksdURBQWdCOzs7O1FBQXBCO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUMxQyxJQUFJLENBQUMsbUJBQW1CLElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLG1CQUFtQixDQUM3RSxDQUFDO1FBQ0osQ0FBQzs7O09BQUE7Ozs7SUFPRCw0Q0FBUTs7O0lBQVIsY0FBWSxDQUFDOztnQkFyQ2QsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFFBQVEsRUFBRSxnSkFHVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7Ozs7Z0JBWFEsWUFBWTtnQkFFWiwrQkFBK0I7Ozt3QkFXckMsV0FBVyxTQUFDLE9BQU87OEJBQ25CLFdBQVcsU0FBQyxPQUFPOzZCQVFuQixLQUFLO3NDQUVMLEtBQUs7O0lBa0JSLGdDQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0E5QlkseUJBQXlCOzs7SUFDcEMsMENBQXNEOztJQVN0RCwrQ0FBNEI7O0lBRTVCLHdEQUFxQzs7Ozs7SUFhbkMsOENBQStCOzs7OztJQUMvQiw0REFBZ0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVTdHlsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5cclxuaW1wb3J0IHsgUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlckNvbXBvbmVudCB9IGZyb20gJy4uL3Byb2dyZXNzaXZlLWltYWdlLWxvYWRlci9wcm9ncmVzc2l2ZS1pbWFnZS1sb2FkZXIuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbmd4LWltYWdlLXBsYWNlaG9sZGVyJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGltZyBjbGFzcz1cInBsYWNlaG9sZGVyLWxvYWRpbmctaW1hZ2VcIiBbc3JjXT1cInNhZmVMb2FkaW5nSW1hZ2VcIiBbc3R5bGUuZmlsdGVyXT1cImltYWdlRmlsdGVyXCIgLz5cclxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICBgLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbWFnZVBsYWNlaG9sZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xhc3MgPSAnbmd4LWltYWdlLXBsYWNlaG9sZGVyJztcclxuICBASG9zdEJpbmRpbmcoJ3N0eWxlJylcclxuICBnZXQgcGxhY2VIb2xkZXIoKTogU2FmZVN0eWxlIHtcclxuICAgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0U3R5bGUoXHJcbiAgICAgIGBwYWRkaW5nLWJvdHRvbTogJHsxMDAgLyAodGhpcy5pbWFnZVJhdGlvIHx8IHRoaXMuX1Byb2dyZXNzaXZlSW1hZ2VMb2FkZXIuaW1hZ2VSYXRpbyl9JTtgXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gdG8gY3JlYXRlIGEgcGxhY2Vob2xkZXIgYmVmb3JlIGZpbmlzaCBsb2FkaW5nIHRoZSByZWFsIGltYWdlIHRvIGF2b2lkIHJlZmxvd1xyXG4gIEBJbnB1dCgpIGltYWdlUmF0aW86IG51bWJlcjtcclxuICAvLyBhIGxvYWRpbmcgaW1hZ2Ugc2hvd2luZyBiZWZvcmUgdGhlIHJlYWwgaW1hZ2UgaXMgbG9hZGVkXHJcbiAgQElucHV0KCkgcGxhY2Vob2xkZXJJbWFnZVNyYzogc3RyaW5nO1xyXG5cclxuICBnZXQgaW1hZ2VGaWx0ZXIoKTogU2FmZVN0eWxlIHtcclxuICAgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0U3R5bGUoYCR7dGhpcy5fUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlci5maWx0ZXJ9YCk7XHJcbiAgfVxyXG5cclxuICBnZXQgc2FmZUxvYWRpbmdJbWFnZSgpOiBTYWZlU3R5bGUge1xyXG4gICAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RVcmwoXHJcbiAgICAgIHRoaXMucGxhY2Vob2xkZXJJbWFnZVNyYyB8fCB0aGlzLl9Qcm9ncmVzc2l2ZUltYWdlTG9hZGVyLnBsYWNlaG9sZGVySW1hZ2VTcmNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXHJcbiAgICBwcml2YXRlIF9Qcm9ncmVzc2l2ZUltYWdlTG9hZGVyOiBQcm9ncmVzc2l2ZUltYWdlTG9hZGVyQ29tcG9uZW50XHJcbiAgKSB7fVxyXG5cclxuICBuZ09uSW5pdCgpIHt9XHJcbn1cclxuIl19