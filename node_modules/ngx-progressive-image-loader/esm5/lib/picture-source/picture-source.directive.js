/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, Injector, Input, Renderer2 } from '@angular/core';
import { WINDOW } from 'ngx-window-token';
var PictureSourceDirective = /** @class */ (function () {
    function PictureSourceDirective(_ElementRef, _Renderer, window, _Injector) {
        this._ElementRef = _ElementRef;
        this._Renderer = _Renderer;
        this.window = window;
        this._Injector = _Injector;
    }
    /**
     * @return {?}
     */
    PictureSourceDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.imageElement = this._ElementRef.nativeElement;
        // if (isSupportIntersectionObserver(this.window) && !isSpider(this.window)) {
        //   this.setOnLoadedAction();
        // } else {
        //   // show image directly
        //   loadImage(this._Renderer, this.imageElement);
        // }
        // this.setDataSrc();
        // this.ProgressiveImageLoader = this._Injector.get(ProgressiveImageLoaderComponent);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PictureSourceDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!changes["src"].isFirstChange()) {
            this.setDataSrc();
            this.ProgressiveImageLoader.intersectionObserver.observe(this.imageElement);
        }
    };
    /**
     * @return {?}
     */
    PictureSourceDirective.prototype.setDataSrc = /**
     * @return {?}
     */
    function () {
        this._Renderer.setAttribute(this.imageElement, 'data-src', this.src);
        this.srcset && this._Renderer.setAttribute(this.imageElement, 'data-srcset', this.srcset);
    };
    PictureSourceDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'source[ngxPictureSource], img[ngxPictureSource]'
                },] }
    ];
    /** @nocollapse */
    PictureSourceDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Inject, args: [WINDOW,] }] },
        { type: Injector }
    ]; };
    PictureSourceDirective.propDecorators = {
        src: [{ type: Input }],
        srcset: [{ type: Input }]
    };
    return PictureSourceDirective;
}());
export { PictureSourceDirective };
if (false) {
    /** @type {?} */
    PictureSourceDirective.prototype.src;
    /** @type {?} */
    PictureSourceDirective.prototype.srcset;
    /** @type {?} */
    PictureSourceDirective.prototype.imageElement;
    /** @type {?} */
    PictureSourceDirective.prototype.ProgressiveImageLoader;
    /** @type {?} */
    PictureSourceDirective.prototype._ElementRef;
    /** @type {?} */
    PictureSourceDirective.prototype._Renderer;
    /** @type {?} */
    PictureSourceDirective.prototype.window;
    /** @type {?} */
    PictureSourceDirective.prototype._Injector;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGljdHVyZS1zb3VyY2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXByb2dyZXNzaXZlLWltYWdlLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9waWN0dXJlLXNvdXJjZS9waWN0dXJlLXNvdXJjZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFxQixTQUFTLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQzVILE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7SUFnQnhDLGdDQUNVLGFBQ0QsV0FDaUIsTUFBVyxFQUMzQjtRQUhBLGdCQUFXLEdBQVgsV0FBVztRQUNaLGNBQVMsR0FBVCxTQUFTO1FBQ1EsV0FBTSxHQUFOLE1BQU0sQ0FBSztRQUMzQixjQUFTLEdBQVQsU0FBUztLQUNmOzs7O0lBRUoseUNBQVE7OztJQUFSOzs7Ozs7Ozs7O0tBVUM7Ozs7O0lBQ0QsNENBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxPQUFPLFFBQUssYUFBYSxFQUFFLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzdFO0tBQ0Y7Ozs7SUFDRCwyQ0FBVTs7O0lBQVY7UUFDRSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDM0Y7O2dCQXZDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlEQUFpRDtpQkFDNUQ7Ozs7Z0JBUG1CLFVBQVU7Z0JBQThDLFNBQVM7Z0RBb0JoRixNQUFNLFNBQUMsTUFBTTtnQkFwQnNCLFFBQVE7OztzQkFTN0MsS0FBSzt5QkFHTCxLQUFLOztpQ0FaUjs7U0FRYSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5qZWN0b3IsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXSU5ET1cgfSBmcm9tICduZ3gtd2luZG93LXRva2VuJztcblxuaW1wb3J0IHsgUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlckNvbXBvbmVudCB9IGZyb20gJy4uL3Byb2dyZXNzaXZlLWltYWdlLWxvYWRlci9wcm9ncmVzc2l2ZS1pbWFnZS1sb2FkZXIuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnc291cmNlW25neFBpY3R1cmVTb3VyY2VdLCBpbWdbbmd4UGljdHVyZVNvdXJjZV0nXG59KVxuZXhwb3J0IGNsYXNzIFBpY3R1cmVTb3VyY2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpXG4gIHNyYzogc3RyaW5nO1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG4gIEBJbnB1dCgpXG4gIHNyY3NldDogc3RyaW5nO1xuICBpbWFnZUVsZW1lbnQ6IEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MU291cmNlRWxlbWVudDtcbiAgUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlcjogUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlckNvbXBvbmVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9FbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHB1YmxpYyBfUmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBASW5qZWN0KFdJTkRPVykgcHJpdmF0ZSB3aW5kb3c6IGFueSxcbiAgICBwcml2YXRlIF9JbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIC8vIHRoaXMuaW1hZ2VFbGVtZW50ID0gdGhpcy5fRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIC8vIGlmIChpc1N1cHBvcnRJbnRlcnNlY3Rpb25PYnNlcnZlcih0aGlzLndpbmRvdykgJiYgIWlzU3BpZGVyKHRoaXMud2luZG93KSkge1xuICAgIC8vICAgdGhpcy5zZXRPbkxvYWRlZEFjdGlvbigpO1xuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICAvLyBzaG93IGltYWdlIGRpcmVjdGx5XG4gICAgLy8gICBsb2FkSW1hZ2UodGhpcy5fUmVuZGVyZXIsIHRoaXMuaW1hZ2VFbGVtZW50KTtcbiAgICAvLyB9XG4gICAgLy8gdGhpcy5zZXREYXRhU3JjKCk7XG4gICAgLy8gdGhpcy5Qcm9ncmVzc2l2ZUltYWdlTG9hZGVyID0gdGhpcy5fSW5qZWN0b3IuZ2V0KFByb2dyZXNzaXZlSW1hZ2VMb2FkZXJDb21wb25lbnQpO1xuICB9XG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoIWNoYW5nZXMuc3JjLmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgdGhpcy5zZXREYXRhU3JjKCk7XG4gICAgICB0aGlzLlByb2dyZXNzaXZlSW1hZ2VMb2FkZXIuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmltYWdlRWxlbWVudCk7XG4gICAgfVxuICB9XG4gIHNldERhdGFTcmMoKSB7XG4gICAgdGhpcy5fUmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuaW1hZ2VFbGVtZW50LCAnZGF0YS1zcmMnLCB0aGlzLnNyYyk7XG4gICAgdGhpcy5zcmNzZXQgJiYgdGhpcy5fUmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuaW1hZ2VFbGVtZW50LCAnZGF0YS1zcmNzZXQnLCB0aGlzLnNyY3NldCk7XG4gIH1cbn1cbiJdfQ==