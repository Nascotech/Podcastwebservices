/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Inject, Input, Optional, Output, Renderer2 } from '@angular/core';
import { ConfigurationService } from '../configuration.service';
import { ImagePlaceholderComponent } from '../image-placeholder/image-placeholder.component';
import { ProgressiveImageLoaderComponent } from '../progressive-image-loader/progressive-image-loader.component';
import { isPictureElement, loadImage } from '../util';
var ProgressiveImageDirective = /** @class */ (function () {
    function ProgressiveImageDirective(_ElementRef, _Renderer, _ConfigurationService, _ImagePlaceholder, _ProgressiveImageLoader) {
        this._ElementRef = _ElementRef;
        this._Renderer = _Renderer;
        this._ConfigurationService = _ConfigurationService;
        this._ImagePlaceholder = _ImagePlaceholder;
        this._ProgressiveImageLoader = _ProgressiveImageLoader;
        this.noPlaceholder = false;
        this.onImageLoaded = new EventEmitter();
        this.isObserved = false;
    }
    Object.defineProperty(ProgressiveImageDirective.prototype, "imageRatio", {
        get: /**
         * @return {?}
         */
        function () {
            return this._imageRatio || this._ProgressiveImageLoader.imageRatio;
        },
        // to create a placeholder before finish loading the real image to avoid reflow
        set: 
        // to create a placeholder before finish loading the real image to avoid reflow
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._imageRatio = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressiveImageDirective.prototype, "placeholderImageSrc", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholderImageSrc || this._ProgressiveImageLoader.placeholderImageSrc;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._placeholderImageSrc = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ProgressiveImageDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.imageElement = this._ElementRef.nativeElement;
        this.setDataSrc('data-src', this.src);
        this.setDataSrc('data-srcset', this.srcset);
        if (this._ProgressiveImageLoader.isObservable) {
            // only image element need to be observe and have onload event
            if (this.imageElement instanceof HTMLImageElement) {
                this.isObserved = true;
                this._ProgressiveImageLoader.observe(this.imageElement);
                this.imageElement.onload = (/**
                 * @return {?}
                 */
                function () {
                    _this.onImageLoaded.emit(_this.imageElement);
                    _this.imageElement.classList.add('loaded');
                    _this._ProgressiveImageLoader.imageLoaded();
                });
                if (!this._ImagePlaceholder && !this.noPlaceholder) {
                    this.setPlaceholder();
                }
            }
        }
        else {
            // show image directly
            loadImage(this._Renderer, this.imageElement);
            this.imageElement.classList.add('loaded');
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ProgressiveImageDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        changes.src && !changes.src.isFirstChange() && this.setDataSrc('data-src', this.src);
        changes.srcset &&
            !changes.srcset.isFirstChange() &&
            this.setDataSrc('data-srcset', this.srcset);
        if (this.isObserved &&
            ((changes.src && !changes.src.isFirstChange()) ||
                (changes.srcset && !changes.srcset.isFirstChange()))) {
            this._ProgressiveImageLoader.unobserve(this.imageElement);
            this._ProgressiveImageLoader.observe(this.imageElement);
        }
    };
    /**
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    ProgressiveImageDirective.prototype.setDataSrc = /**
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    function (attr, value) {
        value && this._Renderer.setAttribute(this.imageElement, attr, value);
    };
    /**
     * @return {?}
     */
    ProgressiveImageDirective.prototype.setPlaceholder = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parentElement = this.imageElement.parentElement;
        /** @type {?} */
        var placeholder = this.createPlaceholder(this.createPlaceholderImage());
        if (isPictureElement(parentElement)) {
            /** @type {?} */
            var pictureParent = parentElement.parentElement;
            this.insertPlaceholder(pictureParent, parentElement, placeholder);
        }
        else {
            this.insertPlaceholder(parentElement, this.imageElement, placeholder);
        }
    };
    /**
     * @private
     * @param {?} parentElement
     * @param {?} imagePicture
     * @param {?} placeholder
     * @return {?}
     */
    ProgressiveImageDirective.prototype.insertPlaceholder = /**
     * @private
     * @param {?} parentElement
     * @param {?} imagePicture
     * @param {?} placeholder
     * @return {?}
     */
    function (parentElement, imagePicture, placeholder) {
        parentElement.insertBefore(placeholder, imagePicture);
        placeholder.style.paddingBottom = 100 / this.imageRatio + "%";
        placeholder.appendChild(imagePicture);
    };
    /**
     * @private
     * @param {?} placeholderImage
     * @return {?}
     */
    ProgressiveImageDirective.prototype.createPlaceholder = /**
     * @private
     * @param {?} placeholderImage
     * @return {?}
     */
    function (placeholderImage) {
        /** @type {?} */
        var placeholder = document.createElement('div');
        placeholder.classList.add('ngx-image-placeholder');
        placeholder.appendChild(placeholderImage);
        return placeholder;
    };
    /**
     * @return {?}
     */
    ProgressiveImageDirective.prototype.createPlaceholderImage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var img = new Image();
        img.classList.add('placeholder-loading-image');
        img.style.filter = this._ProgressiveImageLoader.filter;
        img.src = this.placeholderImageSrc;
        return img;
    };
    ProgressiveImageDirective.decorators = [
        { type: Directive, args: [{
                    // make sure the element is an image element
                    selector: 'img[ngxProgressiveImage], source[ngxProgressiveImage]'
                },] }
    ];
    /** @nocollapse */
    ProgressiveImageDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ConfigurationService },
        { type: ImagePlaceholderComponent, decorators: [{ type: Optional }, { type: Inject, args: [ImagePlaceholderComponent,] }] },
        { type: ProgressiveImageLoaderComponent, decorators: [{ type: Inject, args: [ProgressiveImageLoaderComponent,] }] }
    ]; };
    ProgressiveImageDirective.propDecorators = {
        imageRatio: [{ type: Input }],
        placeholderImageSrc: [{ type: Input }],
        src: [{ type: Input }],
        srcset: [{ type: Input }],
        noPlaceholder: [{ type: Input }],
        onImageLoaded: [{ type: Output }]
    };
    return ProgressiveImageDirective;
}());
export { ProgressiveImageDirective };
if (false) {
    /** @type {?} */
    ProgressiveImageDirective.prototype._imageRatio;
    /** @type {?} */
    ProgressiveImageDirective.prototype._placeholderImageSrc;
    /** @type {?} */
    ProgressiveImageDirective.prototype.src;
    /** @type {?} */
    ProgressiveImageDirective.prototype.srcset;
    /** @type {?} */
    ProgressiveImageDirective.prototype.noPlaceholder;
    /** @type {?} */
    ProgressiveImageDirective.prototype.onImageLoaded;
    /** @type {?} */
    ProgressiveImageDirective.prototype.imageElement;
    /** @type {?} */
    ProgressiveImageDirective.prototype.isObserved;
    /**
     * @type {?}
     * @private
     */
    ProgressiveImageDirective.prototype._ElementRef;
    /** @type {?} */
    ProgressiveImageDirective.prototype._Renderer;
    /** @type {?} */
    ProgressiveImageDirective.prototype._ConfigurationService;
    /**
     * @type {?}
     * @private
     */
    ProgressiveImageDirective.prototype._ImagePlaceholder;
    /**
     * @type {?}
     * @private
     */
    ProgressiveImageDirective.prototype._ProgressiveImageLoader;
}
//# sourceMappingURL=data:application/json;base64,