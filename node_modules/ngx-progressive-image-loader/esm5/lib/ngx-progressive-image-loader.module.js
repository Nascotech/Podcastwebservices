/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { IMAGE_LOADER_CONFIG_TOKEN } from './config';
import { ConfigurationService } from './configuration.service';
import { ImagePlaceholderComponent } from './image-placeholder/image-placeholder.component';
import { ProgressiveImageLoaderComponent } from './progressive-image-loader/progressive-image-loader.component';
import { ProgressiveImageDirective } from './progressive-image/progressive-image.directive';
/**
 * @param {?} options
 * @return {?}
 */
export function ConfigurationServiceFactory(options) {
    return new ConfigurationService(options);
}
var NgxProgressiveImageLoaderModule = /** @class */ (function () {
    function NgxProgressiveImageLoaderModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    NgxProgressiveImageLoaderModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NgxProgressiveImageLoaderModule,
            providers: [
                { provide: IMAGE_LOADER_CONFIG_TOKEN, useValue: config },
                {
                    provide: ConfigurationService,
                    useFactory: ConfigurationServiceFactory,
                    deps: [IMAGE_LOADER_CONFIG_TOKEN]
                }
            ]
        };
    };
    NgxProgressiveImageLoaderModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        ProgressiveImageLoaderComponent,
                        ProgressiveImageDirective,
                        ImagePlaceholderComponent
                    ],
                    exports: [ProgressiveImageLoaderComponent, ProgressiveImageDirective, ImagePlaceholderComponent]
                },] }
    ];
    return NgxProgressiveImageLoaderModule;
}());
export { NgxProgressiveImageLoaderModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByb2dyZXNzaXZlLWltYWdlLWxvYWRlci5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJvZ3Jlc3NpdmUtaW1hZ2UtbG9hZGVyLyIsInNvdXJjZXMiOlsibGliL25neC1wcm9ncmVzc2l2ZS1pbWFnZS1sb2FkZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQXVCLHlCQUF5QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQzVGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLCtEQUErRCxDQUFDO0FBQ2hILE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDOzs7OztBQUU1RixNQUFNLFVBQVUsMkJBQTJCLENBQUMsT0FBNEI7SUFDdEUsT0FBTyxJQUFJLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFDRDtJQUFBO0lBdUJBLENBQUM7Ozs7O0lBYmUsdUNBQU87Ozs7SUFBckIsVUFBc0IsTUFBNEI7UUFDaEQsT0FBTztZQUNMLFFBQVEsRUFBRSwrQkFBK0I7WUFDekMsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7Z0JBQ3hEO29CQUNFLE9BQU8sRUFBRSxvQkFBb0I7b0JBQzdCLFVBQVUsRUFBRSwyQkFBMkI7b0JBQ3ZDLElBQUksRUFBRSxDQUFDLHlCQUF5QixDQUFDO2lCQUNsQzthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQXRCRixRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsWUFBWSxFQUFFO3dCQUNaLCtCQUErQjt3QkFDL0IseUJBQXlCO3dCQUN6Qix5QkFBeUI7cUJBQzFCO29CQUNELE9BQU8sRUFBRSxDQUFDLCtCQUErQixFQUFFLHlCQUF5QixFQUFFLHlCQUF5QixDQUFDO2lCQUNqRzs7SUFlRCxzQ0FBQztDQUFBLEFBdkJELElBdUJDO1NBZFksK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IElJbWFnZUxvYWRlck9wdGlvbnMsIElNQUdFX0xPQURFUl9DT05GSUdfVE9LRU4gfSBmcm9tICcuL2NvbmZpZyc7XHJcbmltcG9ydCB7IENvbmZpZ3VyYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9jb25maWd1cmF0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJbWFnZVBsYWNlaG9sZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9pbWFnZS1wbGFjZWhvbGRlci9pbWFnZS1wbGFjZWhvbGRlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQcm9ncmVzc2l2ZUltYWdlTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9wcm9ncmVzc2l2ZS1pbWFnZS1sb2FkZXIvcHJvZ3Jlc3NpdmUtaW1hZ2UtbG9hZGVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFByb2dyZXNzaXZlSW1hZ2VEaXJlY3RpdmUgfSBmcm9tICcuL3Byb2dyZXNzaXZlLWltYWdlL3Byb2dyZXNzaXZlLWltYWdlLmRpcmVjdGl2ZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ29uZmlndXJhdGlvblNlcnZpY2VGYWN0b3J5KG9wdGlvbnM6IElJbWFnZUxvYWRlck9wdGlvbnMpIHtcclxuICByZXR1cm4gbmV3IENvbmZpZ3VyYXRpb25TZXJ2aWNlKG9wdGlvbnMpO1xyXG59XHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW10sXHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBQcm9ncmVzc2l2ZUltYWdlTG9hZGVyQ29tcG9uZW50LFxyXG4gICAgUHJvZ3Jlc3NpdmVJbWFnZURpcmVjdGl2ZSxcclxuICAgIEltYWdlUGxhY2Vob2xkZXJDb21wb25lbnRcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtQcm9ncmVzc2l2ZUltYWdlTG9hZGVyQ29tcG9uZW50LCBQcm9ncmVzc2l2ZUltYWdlRGlyZWN0aXZlLCBJbWFnZVBsYWNlaG9sZGVyQ29tcG9uZW50XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UHJvZ3Jlc3NpdmVJbWFnZUxvYWRlck1vZHVsZSB7XHJcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KGNvbmZpZz86IElJbWFnZUxvYWRlck9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBOZ3hQcm9ncmVzc2l2ZUltYWdlTG9hZGVyTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IElNQUdFX0xPQURFUl9DT05GSUdfVE9LRU4sIHVzZVZhbHVlOiBjb25maWcgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBDb25maWd1cmF0aW9uU2VydmljZSxcclxuICAgICAgICAgIHVzZUZhY3Rvcnk6IENvbmZpZ3VyYXRpb25TZXJ2aWNlRmFjdG9yeSxcclxuICAgICAgICAgIGRlcHM6IFtJTUFHRV9MT0FERVJfQ09ORklHX1RPS0VOXVxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19