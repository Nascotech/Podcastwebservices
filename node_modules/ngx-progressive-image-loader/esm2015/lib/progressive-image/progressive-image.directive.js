/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Inject, Input, Optional, Output, Renderer2 } from '@angular/core';
import { ConfigurationService } from '../configuration.service';
import { ImagePlaceholderComponent } from '../image-placeholder/image-placeholder.component';
import { ProgressiveImageLoaderComponent } from '../progressive-image-loader/progressive-image-loader.component';
import { isPictureElement, loadImage } from '../util';
export class ProgressiveImageDirective {
    /**
     * @param {?} _ElementRef
     * @param {?} _Renderer
     * @param {?} _ConfigurationService
     * @param {?} _ImagePlaceholder
     * @param {?} _ProgressiveImageLoader
     */
    constructor(_ElementRef, _Renderer, _ConfigurationService, _ImagePlaceholder, _ProgressiveImageLoader) {
        this._ElementRef = _ElementRef;
        this._Renderer = _Renderer;
        this._ConfigurationService = _ConfigurationService;
        this._ImagePlaceholder = _ImagePlaceholder;
        this._ProgressiveImageLoader = _ProgressiveImageLoader;
        this.noPlaceholder = false;
        this.onImageLoaded = new EventEmitter();
        this.isObserved = false;
    }
    // to create a placeholder before finish loading the real image to avoid reflow
    /**
     * @param {?} value
     * @return {?}
     */
    set imageRatio(value) {
        this._imageRatio = value;
    }
    /**
     * @return {?}
     */
    get imageRatio() {
        return this._imageRatio || this._ProgressiveImageLoader.imageRatio;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set placeholderImageSrc(value) {
        this._placeholderImageSrc = value;
    }
    /**
     * @return {?}
     */
    get placeholderImageSrc() {
        return this._placeholderImageSrc || this._ProgressiveImageLoader.placeholderImageSrc;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.imageElement = this._ElementRef.nativeElement;
        this.setDataSrc('data-src', this.src);
        this.setDataSrc('data-srcset', this.srcset);
        if (this._ProgressiveImageLoader.isObservable) {
            // only image element need to be observe and have onload event
            if (this.imageElement instanceof HTMLImageElement) {
                this.isObserved = true;
                this._ProgressiveImageLoader.observe(this.imageElement);
                this.imageElement.onload = (/**
                 * @return {?}
                 */
                () => {
                    this.onImageLoaded.emit(this.imageElement);
                    this.imageElement.classList.add('loaded');
                    this._ProgressiveImageLoader.imageLoaded();
                });
                if (!this._ImagePlaceholder && !this.noPlaceholder) {
                    this.setPlaceholder();
                }
            }
        }
        else {
            // show image directly
            loadImage(this._Renderer, this.imageElement);
            this.imageElement.classList.add('loaded');
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        changes.src && !changes.src.isFirstChange() && this.setDataSrc('data-src', this.src);
        changes.srcset &&
            !changes.srcset.isFirstChange() &&
            this.setDataSrc('data-srcset', this.srcset);
        if (this.isObserved &&
            ((changes.src && !changes.src.isFirstChange()) ||
                (changes.srcset && !changes.srcset.isFirstChange()))) {
            this._ProgressiveImageLoader.unobserve(this.imageElement);
            this._ProgressiveImageLoader.observe(this.imageElement);
        }
    }
    /**
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    setDataSrc(attr, value) {
        value && this._Renderer.setAttribute(this.imageElement, attr, value);
    }
    /**
     * @return {?}
     */
    setPlaceholder() {
        /** @type {?} */
        const parentElement = this.imageElement.parentElement;
        /** @type {?} */
        const placeholder = this.createPlaceholder(this.createPlaceholderImage());
        if (isPictureElement(parentElement)) {
            /** @type {?} */
            const pictureParent = parentElement.parentElement;
            this.insertPlaceholder(pictureParent, parentElement, placeholder);
        }
        else {
            this.insertPlaceholder(parentElement, this.imageElement, placeholder);
        }
    }
    /**
     * @private
     * @param {?} parentElement
     * @param {?} imagePicture
     * @param {?} placeholder
     * @return {?}
     */
    insertPlaceholder(parentElement, imagePicture, placeholder) {
        parentElement.insertBefore(placeholder, imagePicture);
        placeholder.style.paddingBottom = `${100 / this.imageRatio}%`;
        placeholder.appendChild(imagePicture);
    }
    /**
     * @private
     * @param {?} placeholderImage
     * @return {?}
     */
    createPlaceholder(placeholderImage) {
        /** @type {?} */
        const placeholder = document.createElement('div');
        placeholder.classList.add('ngx-image-placeholder');
        placeholder.appendChild(placeholderImage);
        return placeholder;
    }
    /**
     * @return {?}
     */
    createPlaceholderImage() {
        /** @type {?} */
        const img = new Image();
        img.classList.add('placeholder-loading-image');
        img.style.filter = this._ProgressiveImageLoader.filter;
        img.src = this.placeholderImageSrc;
        return img;
    }
}
ProgressiveImageDirective.decorators = [
    { type: Directive, args: [{
                // make sure the element is an image element
                selector: 'img[ngxProgressiveImage], source[ngxProgressiveImage]'
            },] }
];
/** @nocollapse */
ProgressiveImageDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ConfigurationService },
    { type: ImagePlaceholderComponent, decorators: [{ type: Optional }, { type: Inject, args: [ImagePlaceholderComponent,] }] },
    { type: ProgressiveImageLoaderComponent, decorators: [{ type: Inject, args: [ProgressiveImageLoaderComponent,] }] }
];
ProgressiveImageDirective.propDecorators = {
    imageRatio: [{ type: Input }],
    placeholderImageSrc: [{ type: Input }],
    src: [{ type: Input }],
    srcset: [{ type: Input }],
    noPlaceholder: [{ type: Input }],
    onImageLoaded: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ProgressiveImageDirective.prototype._imageRatio;
    /** @type {?} */
    ProgressiveImageDirective.prototype._placeholderImageSrc;
    /** @type {?} */
    ProgressiveImageDirective.prototype.src;
    /** @type {?} */
    ProgressiveImageDirective.prototype.srcset;
    /** @type {?} */
    ProgressiveImageDirective.prototype.noPlaceholder;
    /** @type {?} */
    ProgressiveImageDirective.prototype.onImageLoaded;
    /** @type {?} */
    ProgressiveImageDirective.prototype.imageElement;
    /** @type {?} */
    ProgressiveImageDirective.prototype.isObserved;
    /**
     * @type {?}
     * @private
     */
    ProgressiveImageDirective.prototype._ElementRef;
    /** @type {?} */
    ProgressiveImageDirective.prototype._Renderer;
    /** @type {?} */
    ProgressiveImageDirective.prototype._ConfigurationService;
    /**
     * @type {?}
     * @private
     */
    ProgressiveImageDirective.prototype._ImagePlaceholder;
    /**
     * @type {?}
     * @private
     */
    ProgressiveImageDirective.prototype._ProgressiveImageLoader;
}
//# sourceMappingURL=data:application/json;base64,