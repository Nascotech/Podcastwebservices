/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, Inject, Input, Optional, PLATFORM_ID, Renderer2 } from '@angular/core';
import { WINDOW } from 'ngx-window-token';
import { ConfigurationService } from '../configuration.service';
import { isSpider, isSupportIntersectionObserver, loadImage } from '../util';
export class ProgressiveImageLoaderComponent {
    /**
     * @param {?} _Renderer
     * @param {?} _ConfigurationService
     * @param {?} platformId
     * @param {?} window
     */
    constructor(_Renderer, _ConfigurationService, platformId, window) {
        this._Renderer = _Renderer;
        this._ConfigurationService = _ConfigurationService;
        this.platformId = platformId;
        this.window = window;
        // to store observed images
        this.targetMap = new Map();
        // to maintain the sequence of observed images
        this.targetQueue = (/** @type {?} */ ([]));
        // counter of current loading images
        this.loading = 0;
    }
    /**
     * @return {?}
     */
    get isObservable() {
        return !!this.intersectionObserver;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.isAggressiveLoading === undefined) {
            this.isAggressiveLoading = this._ConfigurationService.config.isAggressiveLoading;
        }
        if (this.concurrentLoading === undefined) {
            this.concurrentLoading = this._ConfigurationService.config.concurrentLoading;
        }
        if (this.window &&
            isSupportIntersectionObserver(this.window) &&
            !isSpider(this.window) &&
            isPlatformBrowser(this.platformId)) {
            if (!this.imageRatio) {
                this.imageRatio = this._ConfigurationService.config.imageRatio;
            }
            if (!this.filter) {
                this.filter = this._ConfigurationService.config.filter;
            }
            if (!this.placeholderImageSrc) {
                this.placeholderImageSrc = this._ConfigurationService.config.placeholderImageSrc;
            }
            this.intersectionObserver = new IntersectionObserver(this.onIntersectionChanged.bind(this), this._ConfigurationService.config);
        }
    }
    /**
     * @param {?} target
     * @return {?}
     */
    observe(target) {
        // so intersection observer can always detect it correctly, otherwise image elements with 0 in height sometime don't load correctly
        target.style.minHeight = '1rem';
        this.intersectionObserver.observe(target);
        this.targetMap.set(target.dataset.src, target);
        this.targetQueue.push(target.dataset.src);
    }
    /**
     * @param {?} target
     * @return {?}
     */
    unobserve(target) {
        target.style.minHeight = 'initial';
        this.targetMap.delete(target.dataset.src);
        this.intersectionObserver.unobserve(target);
    }
    // called after an image loaded
    /**
     * @return {?}
     */
    imageLoaded() {
        this.loading--;
        while (this.isAggressiveLoading &&
            this.targetQueue &&
            this.targetQueue.length &&
            this.loading <= this.concurrentLoading) {
            /** @type {?} */
            const next = this.targetQueue.shift();
            this.targetMap.has(next) && this.loadImage(this.targetMap.get(next));
        }
    }
    /**
     * @param {?} entries
     * @param {?} observer
     * @return {?}
     */
    onIntersectionChanged(entries, observer) {
        entries.forEach((/**
         * @param {?} entry
         * @return {?}
         */
        entry => {
            if (entry.isIntersecting) {
                this.loadImage((/** @type {?} */ (entry.target)));
            }
        }));
    }
    // start loading an image
    /**
     * @param {?} image
     * @return {?}
     */
    loadImage(image) {
        // Stop observing the current target
        this.unobserve(image);
        this.loading++;
        loadImage(this._Renderer, image);
    }
    /**
     * @return {?}
     */
    reset() {
        this.targetQueue = [];
        this.targetMap = new Map();
        this.isObservable && this.intersectionObserver.disconnect();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.isObservable && this.intersectionObserver.disconnect();
        this.intersectionObserver = this.targetQueue = this.targetMap = undefined;
    }
}
ProgressiveImageLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-progressive-image-loader',
                exportAs: 'ngxProgressiveImageLoader',
                template: `
    <ng-content></ng-content>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
ProgressiveImageLoaderComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ConfigurationService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WINDOW,] }] }
];
ProgressiveImageLoaderComponent.propDecorators = {
    imageRatio: [{ type: Input }],
    concurrentLoading: [{ type: Input }],
    isAggressiveLoading: [{ type: Input }],
    filter: [{ type: Input }],
    placeholderImageSrc: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype.imageRatio;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype.concurrentLoading;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype.isAggressiveLoading;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype.filter;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype.placeholderImageSrc;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype.intersectionObserver;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype.targetMap;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype.targetQueue;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype.loading;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype._Renderer;
    /** @type {?} */
    ProgressiveImageLoaderComponent.prototype._ConfigurationService;
    /**
     * @type {?}
     * @private
     */
    ProgressiveImageLoaderComponent.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    ProgressiveImageLoaderComponent.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,