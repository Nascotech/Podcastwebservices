/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ProgressiveImageLoaderComponent } from '../progressive-image-loader/progressive-image-loader.component';
export class ImagePlaceholderComponent {
    /**
     * @param {?} sanitizer
     * @param {?} _ProgressiveImageLoader
     */
    constructor(sanitizer, _ProgressiveImageLoader) {
        this.sanitizer = sanitizer;
        this._ProgressiveImageLoader = _ProgressiveImageLoader;
        this.class = 'ngx-image-placeholder';
    }
    /**
     * @return {?}
     */
    get placeHolder() {
        return this.sanitizer.bypassSecurityTrustStyle(`padding-bottom: ${100 / (this.imageRatio || this._ProgressiveImageLoader.imageRatio)}%;`);
    }
    /**
     * @return {?}
     */
    get imageFilter() {
        return this.sanitizer.bypassSecurityTrustStyle(`${this._ProgressiveImageLoader.filter}`);
    }
    /**
     * @return {?}
     */
    get safeLoadingImage() {
        return this.sanitizer.bypassSecurityTrustUrl(this.placeholderImageSrc || this._ProgressiveImageLoader.placeholderImageSrc);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
ImagePlaceholderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-image-placeholder',
                template: `
    <img class="placeholder-loading-image" [src]="safeLoadingImage" [style.filter]="imageFilter" />
    <ng-content></ng-content>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
ImagePlaceholderComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ProgressiveImageLoaderComponent }
];
ImagePlaceholderComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class',] }],
    placeHolder: [{ type: HostBinding, args: ['style',] }],
    imageRatio: [{ type: Input }],
    placeholderImageSrc: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ImagePlaceholderComponent.prototype.class;
    /** @type {?} */
    ImagePlaceholderComponent.prototype.imageRatio;
    /** @type {?} */
    ImagePlaceholderComponent.prototype.placeholderImageSrc;
    /**
     * @type {?}
     * @private
     */
    ImagePlaceholderComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    ImagePlaceholderComponent.prototype._ProgressiveImageLoader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtcGxhY2Vob2xkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXByb2dyZXNzaXZlLWltYWdlLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9pbWFnZS1wbGFjZWhvbGRlci9pbWFnZS1wbGFjZWhvbGRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQUUsWUFBWSxFQUFhLE1BQU0sMkJBQTJCLENBQUM7QUFFcEUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sZ0VBQWdFLENBQUM7QUFVakgsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7SUF3QnBDLFlBQ1UsU0FBdUIsRUFDdkIsdUJBQXdEO1FBRHhELGNBQVMsR0FBVCxTQUFTLENBQWM7UUFDdkIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFpQztRQXpCNUMsVUFBSyxHQUFHLHVCQUF1QixDQUFDO0lBMEJuRCxDQUFDOzs7O0lBekJKLElBQ0ksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FDNUMsbUJBQW1CLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQzFGLENBQUM7SUFDSixDQUFDOzs7O0lBT0QsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDM0YsQ0FBQzs7OztJQUVELElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FDMUMsSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FDN0UsQ0FBQztJQUNKLENBQUM7Ozs7SUFPRCxRQUFRLEtBQUksQ0FBQzs7O1lBckNkLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxRQUFRLEVBQUU7OztHQUdUO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7O1lBWFEsWUFBWTtZQUVaLCtCQUErQjs7O29CQVdyQyxXQUFXLFNBQUMsT0FBTzswQkFDbkIsV0FBVyxTQUFDLE9BQU87eUJBUW5CLEtBQUs7a0NBRUwsS0FBSzs7OztJQVhOLDBDQUFzRDs7SUFTdEQsK0NBQTRCOztJQUU1Qix3REFBcUM7Ozs7O0lBYW5DLDhDQUErQjs7Ozs7SUFDL0IsNERBQWdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlU3R5bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbmltcG9ydCB7IFByb2dyZXNzaXZlSW1hZ2VMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuLi9wcm9ncmVzc2l2ZS1pbWFnZS1sb2FkZXIvcHJvZ3Jlc3NpdmUtaW1hZ2UtbG9hZGVyLmNvbXBvbmVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1pbWFnZS1wbGFjZWhvbGRlcicsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxpbWcgY2xhc3M9XCJwbGFjZWhvbGRlci1sb2FkaW5nLWltYWdlXCIgW3NyY109XCJzYWZlTG9hZGluZ0ltYWdlXCIgW3N0eWxlLmZpbHRlcl09XCJpbWFnZUZpbHRlclwiIC8+XHJcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgYCxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW1hZ2VQbGFjZWhvbGRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNsYXNzID0gJ25neC1pbWFnZS1wbGFjZWhvbGRlcic7XHJcbiAgQEhvc3RCaW5kaW5nKCdzdHlsZScpXHJcbiAgZ2V0IHBsYWNlSG9sZGVyKCk6IFNhZmVTdHlsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFN0eWxlKFxyXG4gICAgICBgcGFkZGluZy1ib3R0b206ICR7MTAwIC8gKHRoaXMuaW1hZ2VSYXRpbyB8fCB0aGlzLl9Qcm9ncmVzc2l2ZUltYWdlTG9hZGVyLmltYWdlUmF0aW8pfSU7YFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIHRvIGNyZWF0ZSBhIHBsYWNlaG9sZGVyIGJlZm9yZSBmaW5pc2ggbG9hZGluZyB0aGUgcmVhbCBpbWFnZSB0byBhdm9pZCByZWZsb3dcclxuICBASW5wdXQoKSBpbWFnZVJhdGlvOiBudW1iZXI7XHJcbiAgLy8gYSBsb2FkaW5nIGltYWdlIHNob3dpbmcgYmVmb3JlIHRoZSByZWFsIGltYWdlIGlzIGxvYWRlZFxyXG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVySW1hZ2VTcmM6IHN0cmluZztcclxuXHJcbiAgZ2V0IGltYWdlRmlsdGVyKCk6IFNhZmVTdHlsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFN0eWxlKGAke3RoaXMuX1Byb2dyZXNzaXZlSW1hZ2VMb2FkZXIuZmlsdGVyfWApO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNhZmVMb2FkaW5nSW1hZ2UoKTogU2FmZVN0eWxlIHtcclxuICAgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0VXJsKFxyXG4gICAgICB0aGlzLnBsYWNlaG9sZGVySW1hZ2VTcmMgfHwgdGhpcy5fUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlci5wbGFjZWhvbGRlckltYWdlU3JjXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyLFxyXG4gICAgcHJpdmF0ZSBfUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlcjogUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlckNvbXBvbmVudFxyXG4gICkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7fVxyXG59XHJcbiJdfQ==