{"version":3,"file":"ngx-progressive-image-loader.js.map","sources":["ng://ngx-progressive-image-loader/lib/config.ts","ng://ngx-progressive-image-loader/lib/configuration.service.ts","ng://ngx-progressive-image-loader/lib/util.ts","ng://ngx-progressive-image-loader/lib/progressive-image-loader/progressive-image-loader.component.ts","ng://ngx-progressive-image-loader/lib/image-placeholder/image-placeholder.component.ts","ng://ngx-progressive-image-loader/lib/progressive-image/progressive-image.directive.ts","ng://ngx-progressive-image-loader/lib/ngx-progressive-image-loader.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface IImageLoaderOptions extends IntersectionObserverInit {\r\n  placeholderImageSrc?: string;\r\n  imageRatio: number;\r\n  filter?: string;\r\n  isAggressiveLoading?: boolean;\r\n  concurrentLoading?: number;\r\n}\r\nexport const IMAGE_LOADER_CONFIG_TOKEN = new InjectionToken<IImageLoaderOptions>(\r\n  'Image loader Config'\r\n);\r\n\r\nexport const DEFAULT_IMAGE_LOADER_OPTIONS = <IImageLoaderOptions>{\r\n  // root?: Element | null;\r\n  rootMargin: '10px',\r\n  threshold: [0.1, 0.5, 1],\r\n  imageRatio: 16 / 9,\r\n  placeholderImageSrc: '',\r\n  isAggressiveLoading: true,\r\n  concurrentLoading: 4\r\n};\r\n","import { Inject, Injectable } from '@angular/core';\r\n\r\nimport {\r\n  DEFAULT_IMAGE_LOADER_OPTIONS,\r\n  IImageLoaderOptions,\r\n  IMAGE_LOADER_CONFIG_TOKEN\r\n} from './config';\r\n\r\n@Injectable()\r\nexport class ConfigurationService {\r\n  config: IImageLoaderOptions;\r\n\r\n  constructor(@Inject(IMAGE_LOADER_CONFIG_TOKEN) options: IImageLoaderOptions) {\r\n    this.setConfig(options);\r\n  }\r\n\r\n  setConfig(config: IImageLoaderOptions) {\r\n    if (config) {\r\n      this.config = { ...DEFAULT_IMAGE_LOADER_OPTIONS, ...config };\r\n    } else {\r\n      this.config = DEFAULT_IMAGE_LOADER_OPTIONS;\r\n    }\r\n  }\r\n}\r\n","import { Renderer2 } from '@angular/core';\r\n\r\nexport function isSupportIntersectionObserver(window) {\r\n  return (\r\n    window &&\r\n    'IntersectionObserver' in window &&\r\n    'IntersectionObserverEntry' in window &&\r\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype\r\n  );\r\n}\r\n\r\nexport function isImagePicture(element: HTMLElement) {\r\n  return element instanceof HTMLImageElement || element instanceof HTMLPictureElement;\r\n}\r\n\r\nexport function setAttribute(\r\n  renderer: Renderer2,\r\n  attribute: string,\r\n  element: HTMLImageElement | HTMLSourceElement\r\n) {\r\n  renderer.setAttribute(element, attribute, element.dataset[attribute]);\r\n  // maybe doesn't matter\r\n  // renderer.removeAttribute(element, 'data-' + attribute);\r\n}\r\nexport function isPictureElement(element: HTMLElement) {\r\n  return element.nodeName === 'PICTURE';\r\n}\r\nexport function loadImage(renderer: Renderer2, image: HTMLImageElement) {\r\n  if (isPictureElement(image.parentElement)) {\r\n    const sourceElms = image.parentElement.children;\r\n    for (let index = 0; index < sourceElms.length; index++) {\r\n      const element = sourceElms[index];\r\n      if (element instanceof HTMLSourceElement) {\r\n        setAttribute(renderer, 'srcset', element);\r\n      } else if (element instanceof HTMLImageElement) {\r\n        setAttribute(renderer, 'src', element);\r\n      }\r\n    }\r\n  } else {\r\n    if (image.dataset.src) {\r\n      setAttribute(renderer, 'src', image);\r\n    }\r\n    if (image.dataset.srcset) {\r\n      setAttribute(renderer, 'srcset', image);\r\n    }\r\n  }\r\n}\r\n\r\nexport function isSpider(window) {\r\n  return (\r\n    (window && !('onscroll' in window)) ||\r\n    /(gle|ing|ro)bot|crawl|spider/i.test(window.navigator.userAgent)\r\n  );\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  PLATFORM_ID,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { WINDOW } from 'ngx-window-token';\r\n\r\nimport { ConfigurationService } from '../configuration.service';\r\nimport { isSpider, isSupportIntersectionObserver, loadImage } from '../util';\r\n\r\n@Component({\r\n  selector: 'ngx-progressive-image-loader',\r\n  exportAs: 'ngxProgressiveImageLoader',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProgressiveImageLoaderComponent implements OnInit, OnDestroy {\r\n  // define the placeholder height for all images inside this components\r\n  @Input() imageRatio: number;\r\n  // how many image at least should load at the same time\r\n  @Input() concurrentLoading: number;\r\n  // is going to load images that are being observed but haven't been intersected yet when loading counter < concurrentLoading\r\n  @Input() isAggressiveLoading: boolean;\r\n  @Input() filter: string;\r\n  // the src of loading image\r\n  @Input() placeholderImageSrc: string;\r\n\r\n  intersectionObserver: IntersectionObserver;\r\n  // to store observed images\r\n  targetMap = new Map();\r\n  // to maintain the sequence of observed images\r\n  targetQueue = <string[]>[];\r\n  // counter of current loading images\r\n  loading = 0;\r\n  public get isObservable(): boolean {\r\n    return !!this.intersectionObserver;\r\n  }\r\n\r\n  constructor(\r\n    public _Renderer: Renderer2,\r\n    public _ConfigurationService: ConfigurationService,\r\n    @Inject(PLATFORM_ID) private platformId: any,\r\n    @Optional()\r\n    @Inject(WINDOW)\r\n    private window: any\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.isAggressiveLoading === undefined) {\r\n      this.isAggressiveLoading = this._ConfigurationService.config.isAggressiveLoading;\r\n    }\r\n    if (this.concurrentLoading === undefined) {\r\n      this.concurrentLoading = this._ConfigurationService.config.concurrentLoading;\r\n    }\r\n    if (\r\n      this.window &&\r\n      isSupportIntersectionObserver(this.window) &&\r\n      !isSpider(this.window) &&\r\n      isPlatformBrowser(this.platformId)\r\n    ) {\r\n      if (!this.imageRatio) {\r\n        this.imageRatio = this._ConfigurationService.config.imageRatio;\r\n      }\r\n\r\n      if (!this.filter) {\r\n        this.filter = this._ConfigurationService.config.filter;\r\n      }\r\n      if (!this.placeholderImageSrc) {\r\n        this.placeholderImageSrc = this._ConfigurationService.config.placeholderImageSrc;\r\n      }\r\n      this.intersectionObserver = new IntersectionObserver(\r\n        this.onIntersectionChanged.bind(this),\r\n        this._ConfigurationService.config\r\n      );\r\n    }\r\n  }\r\n\r\n  observe(target: HTMLImageElement) {\r\n    // so intersection observer can always detect it correctly, otherwise image elements with 0 in height sometime don't load correctly\r\n    target.style.minHeight = '1rem';\r\n    this.intersectionObserver.observe(target);\r\n    this.targetMap.set(target.dataset.src, target);\r\n    this.targetQueue.push(target.dataset.src);\r\n  }\r\n\r\n  unobserve(target: HTMLImageElement) {\r\n    target.style.minHeight = 'initial';\r\n    this.targetMap.delete(target.dataset.src);\r\n    this.intersectionObserver.unobserve(target);\r\n  }\r\n  // called after an image loaded\r\n  imageLoaded() {\r\n    this.loading--;\r\n    while (\r\n      this.isAggressiveLoading &&\r\n      this.targetQueue &&\r\n      this.targetQueue.length &&\r\n      this.loading <= this.concurrentLoading\r\n    ) {\r\n      const next = this.targetQueue.shift();\r\n      this.targetMap.has(next) && this.loadImage(this.targetMap.get(next));\r\n    }\r\n  }\r\n  onIntersectionChanged(entries: IntersectionObserverEntry[], observer: IntersectionObserver) {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        this.loadImage(entry.target as HTMLImageElement);\r\n      }\r\n    });\r\n  }\r\n  // start loading an image\r\n  loadImage(image: HTMLImageElement) {\r\n    // Stop observing the current target\r\n    this.unobserve(image);\r\n    this.loading++;\r\n    loadImage(this._Renderer, image);\r\n  }\r\n\r\n  reset() {\r\n    this.targetQueue = [];\r\n    this.targetMap = new Map();\r\n    this.isObservable && this.intersectionObserver.disconnect();\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.isObservable && this.intersectionObserver.disconnect();\r\n    this.intersectionObserver = this.targetQueue = this.targetMap = undefined;\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, HostBinding, Input, OnInit } from '@angular/core';\r\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\r\n\r\nimport { ProgressiveImageLoaderComponent } from '../progressive-image-loader/progressive-image-loader.component';\r\n\r\n@Component({\r\n  selector: 'ngx-image-placeholder',\r\n  template: `\r\n    <img class=\"placeholder-loading-image\" [src]=\"safeLoadingImage\" [style.filter]=\"imageFilter\" />\r\n    <ng-content></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ImagePlaceholderComponent implements OnInit {\r\n  @HostBinding('class') class = 'ngx-image-placeholder';\r\n  @HostBinding('style')\r\n  get placeHolder(): SafeStyle {\r\n    return this.sanitizer.bypassSecurityTrustStyle(\r\n      `padding-bottom: ${100 / (this.imageRatio || this._ProgressiveImageLoader.imageRatio)}%;`\r\n    );\r\n  }\r\n\r\n  // to create a placeholder before finish loading the real image to avoid reflow\r\n  @Input() imageRatio: number;\r\n  // a loading image showing before the real image is loaded\r\n  @Input() placeholderImageSrc: string;\r\n\r\n  get imageFilter(): SafeStyle {\r\n    return this.sanitizer.bypassSecurityTrustStyle(`${this._ProgressiveImageLoader.filter}`);\r\n  }\r\n\r\n  get safeLoadingImage(): SafeStyle {\r\n    return this.sanitizer.bypassSecurityTrustUrl(\r\n      this.placeholderImageSrc || this._ProgressiveImageLoader.placeholderImageSrc\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private sanitizer: DomSanitizer,\r\n    private _ProgressiveImageLoader: ProgressiveImageLoaderComponent\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { ConfigurationService } from '../configuration.service';\r\nimport { ImagePlaceholderComponent } from '../image-placeholder/image-placeholder.component';\r\nimport { ProgressiveImageLoaderComponent } from '../progressive-image-loader/progressive-image-loader.component';\r\nimport { isPictureElement, loadImage } from '../util';\r\n\r\n@Directive({\r\n  // make sure the element is an image element\r\n  selector: 'img[ngxProgressiveImage], source[ngxProgressiveImage]'\r\n})\r\nexport class ProgressiveImageDirective implements OnInit, OnChanges {\r\n  _imageRatio: number;\r\n  // to create a placeholder before finish loading the real image to avoid reflow\r\n  @Input()\r\n  set imageRatio(value: number) {\r\n    this._imageRatio = value;\r\n  }\r\n  get imageRatio() {\r\n    return this._imageRatio || this._ProgressiveImageLoader.imageRatio;\r\n  }\r\n\r\n  // a loading image showing before the real image is loaded\r\n  _placeholderImageSrc: string;\r\n  @Input()\r\n  set placeholderImageSrc(value: string) {\r\n    this._placeholderImageSrc = value;\r\n  }\r\n\r\n  get placeholderImageSrc(): string {\r\n    return this._placeholderImageSrc || this._ProgressiveImageLoader.placeholderImageSrc;\r\n  }\r\n  @Input() src: string;\r\n  @Input() srcset: string;\r\n  @Input() noPlaceholder = false;\r\n  @Output() onImageLoaded = new EventEmitter<HTMLImageElement>();\r\n  imageElement: HTMLImageElement;\r\n  isObserved = false;\r\n  constructor(\r\n    private _ElementRef: ElementRef,\r\n    public _Renderer: Renderer2,\r\n    public _ConfigurationService: ConfigurationService,\r\n    @Optional()\r\n    @Inject(ImagePlaceholderComponent)\r\n    private _ImagePlaceholder: ImagePlaceholderComponent,\r\n    @Inject(ProgressiveImageLoaderComponent)\r\n    private _ProgressiveImageLoader: ProgressiveImageLoaderComponent\r\n  ) {}\r\n  ngOnInit(): void {\r\n    this.imageElement = this._ElementRef.nativeElement;\r\n    this.setDataSrc('data-src', this.src);\r\n    this.setDataSrc('data-srcset', this.srcset);\r\n    if (this._ProgressiveImageLoader.isObservable) {\r\n      // only image element need to be observe and have onload event\r\n      if (this.imageElement instanceof HTMLImageElement) {\r\n        this.isObserved = true;\r\n        this._ProgressiveImageLoader.observe(this.imageElement);\r\n        this.imageElement.onload = () => {\r\n          this.onImageLoaded.emit(this.imageElement);\r\n          this.imageElement.classList.add('loaded');\r\n          this._ProgressiveImageLoader.imageLoaded();\r\n        };\r\n        if (!this._ImagePlaceholder && !this.noPlaceholder) {\r\n          this.setPlaceholder();\r\n        }\r\n      }\r\n    } else {\r\n      // show image directly\r\n      loadImage(this._Renderer, this.imageElement);\r\n      this.imageElement.classList.add('loaded');\r\n    }\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    changes.src && !changes.src.isFirstChange() && this.setDataSrc('data-src', this.src);\r\n    changes.srcset &&\r\n      !changes.srcset.isFirstChange() &&\r\n      this.setDataSrc('data-srcset', this.srcset);\r\n\r\n    if (\r\n      this.isObserved &&\r\n      ((changes.src && !changes.src.isFirstChange()) ||\r\n        (changes.srcset && !changes.srcset.isFirstChange()))\r\n    ) {\r\n      this._ProgressiveImageLoader.unobserve(this.imageElement);\r\n      this._ProgressiveImageLoader.observe(this.imageElement);\r\n    }\r\n  }\r\n  setDataSrc(attr: string, value: string) {\r\n    value && this._Renderer.setAttribute(this.imageElement, attr, value);\r\n  }\r\n\r\n  setPlaceholder() {\r\n    const parentElement = this.imageElement.parentElement;\r\n    const placeholder = this.createPlaceholder(this.createPlaceholderImage());\r\n    if (isPictureElement(parentElement)) {\r\n      const pictureParent = parentElement.parentElement;\r\n      this.insertPlaceholder(pictureParent, parentElement, placeholder);\r\n    } else {\r\n      this.insertPlaceholder(parentElement, this.imageElement, placeholder);\r\n    }\r\n  }\r\n\r\n  private insertPlaceholder(\r\n    parentElement: HTMLElement,\r\n    imagePicture: HTMLElement,\r\n    placeholder: HTMLElement\r\n  ) {\r\n    parentElement.insertBefore(placeholder, imagePicture);\r\n    placeholder.style.paddingBottom = `${100 / this.imageRatio}%`;\r\n    placeholder.appendChild(imagePicture);\r\n  }\r\n\r\n  private createPlaceholder(placeholderImage: HTMLImageElement) {\r\n    const placeholder = document.createElement('div');\r\n    placeholder.classList.add('ngx-image-placeholder');\r\n    placeholder.appendChild(placeholderImage);\r\n    return placeholder;\r\n  }\r\n\r\n  createPlaceholderImage() {\r\n    const img = new Image();\r\n    img.classList.add('placeholder-loading-image');\r\n    img.style.filter = this._ProgressiveImageLoader.filter;\r\n    img.src = this.placeholderImageSrc;\r\n    return img;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { IImageLoaderOptions, IMAGE_LOADER_CONFIG_TOKEN } from './config';\r\nimport { ConfigurationService } from './configuration.service';\r\nimport { ImagePlaceholderComponent } from './image-placeholder/image-placeholder.component';\r\nimport { ProgressiveImageLoaderComponent } from './progressive-image-loader/progressive-image-loader.component';\r\nimport { ProgressiveImageDirective } from './progressive-image/progressive-image.directive';\r\n\r\nexport function ConfigurationServiceFactory(options: IImageLoaderOptions) {\r\n  return new ConfigurationService(options);\r\n}\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [\r\n    ProgressiveImageLoaderComponent,\r\n    ProgressiveImageDirective,\r\n    ImagePlaceholderComponent\r\n  ],\r\n  exports: [ProgressiveImageLoaderComponent, ProgressiveImageDirective, ImagePlaceholderComponent]\r\n})\r\nexport class NgxProgressiveImageLoaderModule {\r\n  public static forRoot(config?: IImageLoaderOptions): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxProgressiveImageLoaderModule,\r\n      providers: [\r\n        { provide: IMAGE_LOADER_CONFIG_TOKEN, useValue: config },\r\n        {\r\n          provide: ConfigurationService,\r\n          useFactory: ConfigurationServiceFactory,\r\n          deps: [IMAGE_LOADER_CONFIG_TOKEN]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
