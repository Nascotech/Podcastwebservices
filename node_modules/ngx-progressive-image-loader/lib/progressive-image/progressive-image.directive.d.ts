import { ElementRef, EventEmitter, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { ConfigurationService } from '../configuration.service';
import { ImagePlaceholderComponent } from '../image-placeholder/image-placeholder.component';
import { ProgressiveImageLoaderComponent } from '../progressive-image-loader/progressive-image-loader.component';
import * as ɵngcc0 from '@angular/core';
export declare class ProgressiveImageDirective implements OnInit, OnChanges {
    private _ElementRef;
    _Renderer: Renderer2;
    _ConfigurationService: ConfigurationService;
    private _ImagePlaceholder;
    private _ProgressiveImageLoader;
    _imageRatio: number;
    imageRatio: number;
    _placeholderImageSrc: string;
    placeholderImageSrc: string;
    src: string;
    srcset: string;
    noPlaceholder: boolean;
    onImageLoaded: EventEmitter<HTMLImageElement>;
    imageElement: HTMLImageElement;
    isObserved: boolean;
    constructor(_ElementRef: ElementRef, _Renderer: Renderer2, _ConfigurationService: ConfigurationService, _ImagePlaceholder: ImagePlaceholderComponent, _ProgressiveImageLoader: ProgressiveImageLoaderComponent);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setDataSrc(attr: string, value: string): void;
    setPlaceholder(): void;
    private insertPlaceholder;
    private createPlaceholder;
    createPlaceholderImage(): HTMLImageElement;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProgressiveImageDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ProgressiveImageDirective, "img[ngxProgressiveImage], source[ngxProgressiveImage]", never, {
    "noPlaceholder": "noPlaceholder";
    "imageRatio": "imageRatio";
    "placeholderImageSrc": "placeholderImageSrc";
    "src": "src";
    "srcset": "srcset";
}, {
    "onImageLoaded": "onImageLoaded";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NpdmUtaW1hZ2UuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInByb2dyZXNzaXZlLWltYWdlLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4uL2NvbmZpZ3VyYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IEltYWdlUGxhY2Vob2xkZXJDb21wb25lbnQgfSBmcm9tICcuLi9pbWFnZS1wbGFjZWhvbGRlci9pbWFnZS1wbGFjZWhvbGRlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQcm9ncmVzc2l2ZUltYWdlTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi4vcHJvZ3Jlc3NpdmUtaW1hZ2UtbG9hZGVyL3Byb2dyZXNzaXZlLWltYWdlLWxvYWRlci5jb21wb25lbnQnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQcm9ncmVzc2l2ZUltYWdlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gICAgcHJpdmF0ZSBfRWxlbWVudFJlZjtcclxuICAgIF9SZW5kZXJlcjogUmVuZGVyZXIyO1xyXG4gICAgX0NvbmZpZ3VyYXRpb25TZXJ2aWNlOiBDb25maWd1cmF0aW9uU2VydmljZTtcclxuICAgIHByaXZhdGUgX0ltYWdlUGxhY2Vob2xkZXI7XHJcbiAgICBwcml2YXRlIF9Qcm9ncmVzc2l2ZUltYWdlTG9hZGVyO1xyXG4gICAgX2ltYWdlUmF0aW86IG51bWJlcjtcclxuICAgIGltYWdlUmF0aW86IG51bWJlcjtcclxuICAgIF9wbGFjZWhvbGRlckltYWdlU3JjOiBzdHJpbmc7XHJcbiAgICBwbGFjZWhvbGRlckltYWdlU3JjOiBzdHJpbmc7XHJcbiAgICBzcmM6IHN0cmluZztcclxuICAgIHNyY3NldDogc3RyaW5nO1xyXG4gICAgbm9QbGFjZWhvbGRlcjogYm9vbGVhbjtcclxuICAgIG9uSW1hZ2VMb2FkZWQ6IEV2ZW50RW1pdHRlcjxIVE1MSW1hZ2VFbGVtZW50PjtcclxuICAgIGltYWdlRWxlbWVudDogSFRNTEltYWdlRWxlbWVudDtcclxuICAgIGlzT2JzZXJ2ZWQ6IGJvb2xlYW47XHJcbiAgICBjb25zdHJ1Y3RvcihfRWxlbWVudFJlZjogRWxlbWVudFJlZiwgX1JlbmRlcmVyOiBSZW5kZXJlcjIsIF9Db25maWd1cmF0aW9uU2VydmljZTogQ29uZmlndXJhdGlvblNlcnZpY2UsIF9JbWFnZVBsYWNlaG9sZGVyOiBJbWFnZVBsYWNlaG9sZGVyQ29tcG9uZW50LCBfUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlcjogUHJvZ3Jlc3NpdmVJbWFnZUxvYWRlckNvbXBvbmVudCk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBzZXREYXRhU3JjKGF0dHI6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBzZXRQbGFjZWhvbGRlcigpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBpbnNlcnRQbGFjZWhvbGRlcjtcclxuICAgIHByaXZhdGUgY3JlYXRlUGxhY2Vob2xkZXI7XHJcbiAgICBjcmVhdGVQbGFjZWhvbGRlckltYWdlKCk6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbn1cclxuIl19