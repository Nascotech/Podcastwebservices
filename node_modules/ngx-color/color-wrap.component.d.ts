import { EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { Color, HSLA, HSVA, RGBA } from './helpers/color.interfaces';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export interface ColorEvent {
    $event: Event;
    color: Color;
}
export declare class ColorWrap implements OnInit, OnChanges, OnDestroy {
    className: string;
    color: HSLA;
    onChange: EventEmitter<ColorEvent>;
    onChangeComplete: EventEmitter<ColorEvent>;
    onSwatchHover: EventEmitter<ColorEvent>;
    oldHue: number;
    hsl: HSLA;
    hsv: HSVA;
    rgb: RGBA;
    hex: string;
    source: string;
    currentColor: string;
    changes: Subscription;
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    setState(data: any): void;
    handleChange(data: any, $event: any): void;
    /** hook for components after a complete change */
    afterValidChange(): void;
    handleSwatchHover(data: any, $event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColorWrap>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ColorWrap, "color-wrap", never, {
    "className": "className";
    "color": "color";
}, {
    "onChange": "onChange";
    "onChangeComplete": "onChangeComplete";
    "onSwatchHover": "onSwatchHover";
}, never>;
}
export declare class ColorWrapModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ColorWrapModule, [typeof ColorWrap], [typeof ɵngcc1.CommonModule], [typeof ColorWrap]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ColorWrapModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3Itd3JhcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY29sb3Itd3JhcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb2xvciwgSFNMQSwgSFNWQSwgUkdCQSB9IGZyb20gJy4vaGVscGVycy9jb2xvci5pbnRlcmZhY2VzJztcbmV4cG9ydCBpbnRlcmZhY2UgQ29sb3JFdmVudCB7XG4gICAgJGV2ZW50OiBFdmVudDtcbiAgICBjb2xvcjogQ29sb3I7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb2xvcldyYXAgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBjbGFzc05hbWU6IHN0cmluZztcbiAgICBjb2xvcjogSFNMQTtcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPENvbG9yRXZlbnQ+O1xuICAgIG9uQ2hhbmdlQ29tcGxldGU6IEV2ZW50RW1pdHRlcjxDb2xvckV2ZW50PjtcbiAgICBvblN3YXRjaEhvdmVyOiBFdmVudEVtaXR0ZXI8Q29sb3JFdmVudD47XG4gICAgb2xkSHVlOiBudW1iZXI7XG4gICAgaHNsOiBIU0xBO1xuICAgIGhzdjogSFNWQTtcbiAgICByZ2I6IFJHQkE7XG4gICAgaGV4OiBzdHJpbmc7XG4gICAgc291cmNlOiBzdHJpbmc7XG4gICAgY3VycmVudENvbG9yOiBzdHJpbmc7XG4gICAgY2hhbmdlczogU3Vic2NyaXB0aW9uO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHNldFN0YXRlKGRhdGE6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlQ2hhbmdlKGRhdGE6IGFueSwgJGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKiBob29rIGZvciBjb21wb25lbnRzIGFmdGVyIGEgY29tcGxldGUgY2hhbmdlICovXG4gICAgYWZ0ZXJWYWxpZENoYW5nZSgpOiB2b2lkO1xuICAgIGhhbmRsZVN3YXRjaEhvdmVyKGRhdGE6IGFueSwgJGV2ZW50OiBhbnkpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29sb3JXcmFwTW9kdWxlIHtcbn1cbiJdfQ==