import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DateFormatter } from './date-formatter';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerInnerComponent implements OnInit, OnChanges {
    locale: string;
    datepickerMode: string;
    startingDay: number;
    yearRange: number;
    minDate: Date;
    maxDate: Date;
    minMode: string;
    maxMode: string;
    showWeeks: boolean;
    formatDay: string;
    formatMonth: string;
    formatYear: string;
    formatDayHeader: string;
    formatDayTitle: string;
    formatMonthTitle: string;
    onlyCurrentMonth: boolean;
    shortcutPropagation: boolean;
    customClass: {
        date: Date;
        mode: string;
        clazz: string;
    }[];
    monthColLimit: number;
    yearColLimit: number;
    dateDisabled: {
        date: Date;
        mode: string;
    }[];
    dayDisabled: number[];
    initDate: Date;
    selectionDone: EventEmitter<Date>;
    update: EventEmitter<Date>;
    activeDateChange: EventEmitter<Date>;
    stepDay: any;
    stepMonth: any;
    stepYear: any;
    uniqueId: string;
    protected modes: string[];
    protected dateFormatter: DateFormatter;
    protected _activeDate: Date;
    protected selectedDate: Date;
    protected activeDateId: string;
    protected refreshViewHandlerDay: Function;
    protected compareHandlerDay: Function;
    protected refreshViewHandlerMonth: Function;
    protected compareHandlerMonth: Function;
    protected refreshViewHandlerYear: Function;
    protected compareHandlerYear: Function;
    activeDate: Date;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    checkIfActiveDateGotUpdated(activeDate: any): void;
    setCompareHandler(handler: Function, type: string): void;
    compare(date1: Date, date2: Date): number | undefined;
    setRefreshViewHandler(handler: Function, type: string): void;
    refreshView(): void;
    dateFilter(date: Date, format: string): string;
    isActive(dateObject: any): boolean;
    createDateObject(date: Date, format: string): any;
    split(arr: any[], size: number): any[];
    fixTimeZone(date: Date): Date;
    select(date: Date, isManual?: boolean): void;
    move(direction: number): void;
    toggleMode(_direction: number): void;
    protected getCustomClassForDate(date: Date): string;
    protected compareDateDisabled(date1Disabled: {
        date: Date;
        mode: string;
    }, date2: Date): number;
    protected isDisabled(date: Date): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerInnerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerInnerComponent, "datepicker-inner", never, {
    "activeDate": "activeDate";
    "datepickerMode": "datepickerMode";
    "locale": "locale";
    "startingDay": "startingDay";
    "yearRange": "yearRange";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "minMode": "minMode";
    "maxMode": "maxMode";
    "showWeeks": "showWeeks";
    "formatDay": "formatDay";
    "formatMonth": "formatMonth";
    "formatYear": "formatYear";
    "formatDayHeader": "formatDayHeader";
    "formatDayTitle": "formatDayTitle";
    "formatMonthTitle": "formatMonthTitle";
    "onlyCurrentMonth": "onlyCurrentMonth";
    "shortcutPropagation": "shortcutPropagation";
    "customClass": "customClass";
    "monthColLimit": "monthColLimit";
    "yearColLimit": "yearColLimit";
    "dateDisabled": "dateDisabled";
    "dayDisabled": "dayDisabled";
    "initDate": "initDate";
}, {
    "selectionDone": "selectionDone";
    "update": "update";
    "activeDateChange": "activeDateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlRm9ybWF0dGVyIH0gZnJvbSAnLi9kYXRlLWZvcm1hdHRlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRlUGlja2VySW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgbG9jYWxlOiBzdHJpbmc7XG4gICAgZGF0ZXBpY2tlck1vZGU6IHN0cmluZztcbiAgICBzdGFydGluZ0RheTogbnVtYmVyO1xuICAgIHllYXJSYW5nZTogbnVtYmVyO1xuICAgIG1pbkRhdGU6IERhdGU7XG4gICAgbWF4RGF0ZTogRGF0ZTtcbiAgICBtaW5Nb2RlOiBzdHJpbmc7XG4gICAgbWF4TW9kZTogc3RyaW5nO1xuICAgIHNob3dXZWVrczogYm9vbGVhbjtcbiAgICBmb3JtYXREYXk6IHN0cmluZztcbiAgICBmb3JtYXRNb250aDogc3RyaW5nO1xuICAgIGZvcm1hdFllYXI6IHN0cmluZztcbiAgICBmb3JtYXREYXlIZWFkZXI6IHN0cmluZztcbiAgICBmb3JtYXREYXlUaXRsZTogc3RyaW5nO1xuICAgIGZvcm1hdE1vbnRoVGl0bGU6IHN0cmluZztcbiAgICBvbmx5Q3VycmVudE1vbnRoOiBib29sZWFuO1xuICAgIHNob3J0Y3V0UHJvcGFnYXRpb246IGJvb2xlYW47XG4gICAgY3VzdG9tQ2xhc3M6IHtcbiAgICAgICAgZGF0ZTogRGF0ZTtcbiAgICAgICAgbW9kZTogc3RyaW5nO1xuICAgICAgICBjbGF6ejogc3RyaW5nO1xuICAgIH1bXTtcbiAgICBtb250aENvbExpbWl0OiBudW1iZXI7XG4gICAgeWVhckNvbExpbWl0OiBudW1iZXI7XG4gICAgZGF0ZURpc2FibGVkOiB7XG4gICAgICAgIGRhdGU6IERhdGU7XG4gICAgICAgIG1vZGU6IHN0cmluZztcbiAgICB9W107XG4gICAgZGF5RGlzYWJsZWQ6IG51bWJlcltdO1xuICAgIGluaXREYXRlOiBEYXRlO1xuICAgIHNlbGVjdGlvbkRvbmU6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICB1cGRhdGU6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBhY3RpdmVEYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZT47XG4gICAgc3RlcERheTogYW55O1xuICAgIHN0ZXBNb250aDogYW55O1xuICAgIHN0ZXBZZWFyOiBhbnk7XG4gICAgdW5pcXVlSWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgbW9kZXM6IHN0cmluZ1tdO1xuICAgIHByb3RlY3RlZCBkYXRlRm9ybWF0dGVyOiBEYXRlRm9ybWF0dGVyO1xuICAgIHByb3RlY3RlZCBfYWN0aXZlRGF0ZTogRGF0ZTtcbiAgICBwcm90ZWN0ZWQgc2VsZWN0ZWREYXRlOiBEYXRlO1xuICAgIHByb3RlY3RlZCBhY3RpdmVEYXRlSWQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgcmVmcmVzaFZpZXdIYW5kbGVyRGF5OiBGdW5jdGlvbjtcbiAgICBwcm90ZWN0ZWQgY29tcGFyZUhhbmRsZXJEYXk6IEZ1bmN0aW9uO1xuICAgIHByb3RlY3RlZCByZWZyZXNoVmlld0hhbmRsZXJNb250aDogRnVuY3Rpb247XG4gICAgcHJvdGVjdGVkIGNvbXBhcmVIYW5kbGVyTW9udGg6IEZ1bmN0aW9uO1xuICAgIHByb3RlY3RlZCByZWZyZXNoVmlld0hhbmRsZXJZZWFyOiBGdW5jdGlvbjtcbiAgICBwcm90ZWN0ZWQgY29tcGFyZUhhbmRsZXJZZWFyOiBGdW5jdGlvbjtcbiAgICBhY3RpdmVEYXRlOiBEYXRlO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgY2hlY2tJZkFjdGl2ZURhdGVHb3RVcGRhdGVkKGFjdGl2ZURhdGU6IGFueSk6IHZvaWQ7XG4gICAgc2V0Q29tcGFyZUhhbmRsZXIoaGFuZGxlcjogRnVuY3Rpb24sIHR5cGU6IHN0cmluZyk6IHZvaWQ7XG4gICAgY29tcGFyZShkYXRlMTogRGF0ZSwgZGF0ZTI6IERhdGUpOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgc2V0UmVmcmVzaFZpZXdIYW5kbGVyKGhhbmRsZXI6IEZ1bmN0aW9uLCB0eXBlOiBzdHJpbmcpOiB2b2lkO1xuICAgIHJlZnJlc2hWaWV3KCk6IHZvaWQ7XG4gICAgZGF0ZUZpbHRlcihkYXRlOiBEYXRlLCBmb3JtYXQ6IHN0cmluZyk6IHN0cmluZztcbiAgICBpc0FjdGl2ZShkYXRlT2JqZWN0OiBhbnkpOiBib29sZWFuO1xuICAgIGNyZWF0ZURhdGVPYmplY3QoZGF0ZTogRGF0ZSwgZm9ybWF0OiBzdHJpbmcpOiBhbnk7XG4gICAgc3BsaXQoYXJyOiBhbnlbXSwgc2l6ZTogbnVtYmVyKTogYW55W107XG4gICAgZml4VGltZVpvbmUoZGF0ZTogRGF0ZSk6IERhdGU7XG4gICAgc2VsZWN0KGRhdGU6IERhdGUsIGlzTWFudWFsPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgbW92ZShkaXJlY3Rpb246IG51bWJlcik6IHZvaWQ7XG4gICAgdG9nZ2xlTW9kZShfZGlyZWN0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBnZXRDdXN0b21DbGFzc0ZvckRhdGUoZGF0ZTogRGF0ZSk6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgY29tcGFyZURhdGVEaXNhYmxlZChkYXRlMURpc2FibGVkOiB7XG4gICAgICAgIGRhdGU6IERhdGU7XG4gICAgICAgIG1vZGU6IHN0cmluZztcbiAgICB9LCBkYXRlMjogRGF0ZSk6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgaXNEaXNhYmxlZChkYXRlOiBEYXRlKTogYm9vbGVhbjtcbn1cbiJdfQ==