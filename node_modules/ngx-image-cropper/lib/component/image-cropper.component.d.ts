import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeStyle, SafeUrl } from '@angular/platform-browser';
import { CropperPosition, Dimensions, ImageCroppedEvent, ImageTransform } from '../interfaces';
import { MoveTypes } from '../interfaces/move-start.interface';
import * as ɵngcc0 from '@angular/core';
export declare class ImageCropperComponent implements OnChanges, OnInit {
    private sanitizer;
    private cd;
    private Hammer;
    private originalImage;
    private transformedImage;
    private originalBase64;
    private transformedBase64;
    private moveStart;
    private originalSize;
    private transformedSize;
    private setImageMaxSizeRetries;
    private cropperScaledMinWidth;
    private cropperScaledMinHeight;
    private exifTransform;
    private autoRotateSupported;
    private stepSize;
    safeImgDataUrl: SafeUrl | string;
    safeTransformStyle: SafeStyle | string;
    marginLeft: SafeStyle | string;
    maxSize: Dimensions;
    imageVisible: boolean;
    moveTypes: typeof MoveTypes;
    wrapper: ElementRef;
    sourceImage: ElementRef;
    imageChangedEvent: any;
    imageURL: string;
    imageBase64: string;
    imageFile: File;
    format: 'png' | 'jpeg' | 'bmp' | 'webp' | 'ico';
    maintainAspectRatio: boolean;
    transform: ImageTransform;
    aspectRatio: number;
    resizeToWidth: number;
    resizeToHeight: number;
    cropperMinWidth: number;
    cropperMinHeight: number;
    canvasRotation: number;
    initialStepSize: number;
    roundCropper: boolean;
    onlyScaleDown: boolean;
    imageQuality: number;
    autoCrop: boolean;
    backgroundColor: string;
    containWithinAspectRatio: boolean;
    hideResizeSquares: boolean;
    cropper: CropperPosition;
    alignImage: 'left' | 'center';
    disabled: boolean;
    imageCropped: EventEmitter<ImageCroppedEvent>;
    startCropImage: EventEmitter<void>;
    imageLoaded: EventEmitter<void>;
    cropperReady: EventEmitter<Dimensions>;
    loadImageFailed: EventEmitter<void>;
    constructor(sanitizer: DomSanitizer, cd: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    private onChangesInputImage;
    private isValidImageChangedEvent;
    private setCssTransform;
    ngOnInit(): void;
    private initCropper;
    private loadImage;
    private loadImageFile;
    private isValidImageType;
    private loadBase64Image;
    private checkExifAndLoadBase64Image;
    private loadImageFromURL;
    private transformOriginalImage;
    private transformImageBase64;
    private getTransformedSize;
    private setTransformedImage;
    imageLoadedInView(): void;
    private checkImageMaxSizeRecursively;
    private sourceImageLoaded;
    onResize(): void;
    private activatePinchGesture;
    private resizeCropperPosition;
    resetCropperPosition(): void;
    keyboardAccess(event: any): void;
    private changeKeyboardStepSize;
    private keyboardMoveCropper;
    private getPositionForKey;
    private getInvertedPositionForKey;
    private getEventForKey;
    startMove(event: any, moveType: MoveTypes, position?: string | null): void;
    startPinch(event: any): void;
    moveImg(event: any): void;
    onPinch(event: any): void;
    private setMaxSize;
    private setCropperScaledMinSize;
    private setCropperScaledMinWidth;
    private setCropperScaledMinHeight;
    private checkCropperPosition;
    moveStop(): void;
    pinchStop(): void;
    private move;
    private resize;
    private checkAspectRatio;
    private doAutoCrop;
    crop(): ImageCroppedEvent | null;
    private getImagePosition;
    private getOffsetImagePosition;
    private cropToBase64;
    private getQuality;
    private getResizeRatio;
    private getClientX;
    private getClientY;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ImageCropperComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ImageCropperComponent, "image-cropper", never, {
    "format": "format";
    "maintainAspectRatio": "maintainAspectRatio";
    "transform": "transform";
    "aspectRatio": "aspectRatio";
    "resizeToWidth": "resizeToWidth";
    "resizeToHeight": "resizeToHeight";
    "cropperMinWidth": "cropperMinWidth";
    "cropperMinHeight": "cropperMinHeight";
    "canvasRotation": "canvasRotation";
    "initialStepSize": "initialStepSize";
    "roundCropper": "roundCropper";
    "onlyScaleDown": "onlyScaleDown";
    "imageQuality": "imageQuality";
    "autoCrop": "autoCrop";
    "containWithinAspectRatio": "containWithinAspectRatio";
    "hideResizeSquares": "hideResizeSquares";
    "cropper": "cropper";
    "alignImage": "alignImage";
    "disabled": "disabled";
    "imageChangedEvent": "imageChangedEvent";
    "imageURL": "imageURL";
    "imageBase64": "imageBase64";
    "imageFile": "imageFile";
    "backgroundColor": "backgroundColor";
}, {
    "imageCropped": "imageCropped";
    "startCropImage": "startCropImage";
    "imageLoaded": "imageLoaded";
    "cropperReady": "cropperReady";
    "loadImageFailed": "loadImageFailed";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtY3JvcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaW1hZ2UtY3JvcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlU3R5bGUsIFNhZmVVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IENyb3BwZXJQb3NpdGlvbiwgRGltZW5zaW9ucywgSW1hZ2VDcm9wcGVkRXZlbnQsIEltYWdlVHJhbnNmb3JtIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBNb3ZlVHlwZXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL21vdmUtc3RhcnQuaW50ZXJmYWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEltYWdlQ3JvcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0IHtcbiAgICBwcml2YXRlIHNhbml0aXplcjtcbiAgICBwcml2YXRlIGNkO1xuICAgIHByaXZhdGUgSGFtbWVyO1xuICAgIHByaXZhdGUgb3JpZ2luYWxJbWFnZTtcbiAgICBwcml2YXRlIHRyYW5zZm9ybWVkSW1hZ2U7XG4gICAgcHJpdmF0ZSBvcmlnaW5hbEJhc2U2NDtcbiAgICBwcml2YXRlIHRyYW5zZm9ybWVkQmFzZTY0O1xuICAgIHByaXZhdGUgbW92ZVN0YXJ0O1xuICAgIHByaXZhdGUgb3JpZ2luYWxTaXplO1xuICAgIHByaXZhdGUgdHJhbnNmb3JtZWRTaXplO1xuICAgIHByaXZhdGUgc2V0SW1hZ2VNYXhTaXplUmV0cmllcztcbiAgICBwcml2YXRlIGNyb3BwZXJTY2FsZWRNaW5XaWR0aDtcbiAgICBwcml2YXRlIGNyb3BwZXJTY2FsZWRNaW5IZWlnaHQ7XG4gICAgcHJpdmF0ZSBleGlmVHJhbnNmb3JtO1xuICAgIHByaXZhdGUgYXV0b1JvdGF0ZVN1cHBvcnRlZDtcbiAgICBwcml2YXRlIHN0ZXBTaXplO1xuICAgIHNhZmVJbWdEYXRhVXJsOiBTYWZlVXJsIHwgc3RyaW5nO1xuICAgIHNhZmVUcmFuc2Zvcm1TdHlsZTogU2FmZVN0eWxlIHwgc3RyaW5nO1xuICAgIG1hcmdpbkxlZnQ6IFNhZmVTdHlsZSB8IHN0cmluZztcbiAgICBtYXhTaXplOiBEaW1lbnNpb25zO1xuICAgIGltYWdlVmlzaWJsZTogYm9vbGVhbjtcbiAgICBtb3ZlVHlwZXM6IHR5cGVvZiBNb3ZlVHlwZXM7XG4gICAgd3JhcHBlcjogRWxlbWVudFJlZjtcbiAgICBzb3VyY2VJbWFnZTogRWxlbWVudFJlZjtcbiAgICBpbWFnZUNoYW5nZWRFdmVudDogYW55O1xuICAgIGltYWdlVVJMOiBzdHJpbmc7XG4gICAgaW1hZ2VCYXNlNjQ6IHN0cmluZztcbiAgICBpbWFnZUZpbGU6IEZpbGU7XG4gICAgZm9ybWF0OiAncG5nJyB8ICdqcGVnJyB8ICdibXAnIHwgJ3dlYnAnIHwgJ2ljbyc7XG4gICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogYm9vbGVhbjtcbiAgICB0cmFuc2Zvcm06IEltYWdlVHJhbnNmb3JtO1xuICAgIGFzcGVjdFJhdGlvOiBudW1iZXI7XG4gICAgcmVzaXplVG9XaWR0aDogbnVtYmVyO1xuICAgIHJlc2l6ZVRvSGVpZ2h0OiBudW1iZXI7XG4gICAgY3JvcHBlck1pbldpZHRoOiBudW1iZXI7XG4gICAgY3JvcHBlck1pbkhlaWdodDogbnVtYmVyO1xuICAgIGNhbnZhc1JvdGF0aW9uOiBudW1iZXI7XG4gICAgaW5pdGlhbFN0ZXBTaXplOiBudW1iZXI7XG4gICAgcm91bmRDcm9wcGVyOiBib29sZWFuO1xuICAgIG9ubHlTY2FsZURvd246IGJvb2xlYW47XG4gICAgaW1hZ2VRdWFsaXR5OiBudW1iZXI7XG4gICAgYXV0b0Nyb3A6IGJvb2xlYW47XG4gICAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgY29udGFpbldpdGhpbkFzcGVjdFJhdGlvOiBib29sZWFuO1xuICAgIGhpZGVSZXNpemVTcXVhcmVzOiBib29sZWFuO1xuICAgIGNyb3BwZXI6IENyb3BwZXJQb3NpdGlvbjtcbiAgICBhbGlnbkltYWdlOiAnbGVmdCcgfCAnY2VudGVyJztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBpbWFnZUNyb3BwZWQ6IEV2ZW50RW1pdHRlcjxJbWFnZUNyb3BwZWRFdmVudD47XG4gICAgc3RhcnRDcm9wSW1hZ2U6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBpbWFnZUxvYWRlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGNyb3BwZXJSZWFkeTogRXZlbnRFbWl0dGVyPERpbWVuc2lvbnM+O1xuICAgIGxvYWRJbWFnZUZhaWxlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGNvbnN0cnVjdG9yKHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHByaXZhdGUgb25DaGFuZ2VzSW5wdXRJbWFnZTtcbiAgICBwcml2YXRlIGlzVmFsaWRJbWFnZUNoYW5nZWRFdmVudDtcbiAgICBwcml2YXRlIHNldENzc1RyYW5zZm9ybTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHByaXZhdGUgaW5pdENyb3BwZXI7XG4gICAgcHJpdmF0ZSBsb2FkSW1hZ2U7XG4gICAgcHJpdmF0ZSBsb2FkSW1hZ2VGaWxlO1xuICAgIHByaXZhdGUgaXNWYWxpZEltYWdlVHlwZTtcbiAgICBwcml2YXRlIGxvYWRCYXNlNjRJbWFnZTtcbiAgICBwcml2YXRlIGNoZWNrRXhpZkFuZExvYWRCYXNlNjRJbWFnZTtcbiAgICBwcml2YXRlIGxvYWRJbWFnZUZyb21VUkw7XG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1PcmlnaW5hbEltYWdlO1xuICAgIHByaXZhdGUgdHJhbnNmb3JtSW1hZ2VCYXNlNjQ7XG4gICAgcHJpdmF0ZSBnZXRUcmFuc2Zvcm1lZFNpemU7XG4gICAgcHJpdmF0ZSBzZXRUcmFuc2Zvcm1lZEltYWdlO1xuICAgIGltYWdlTG9hZGVkSW5WaWV3KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGVja0ltYWdlTWF4U2l6ZVJlY3Vyc2l2ZWx5O1xuICAgIHByaXZhdGUgc291cmNlSW1hZ2VMb2FkZWQ7XG4gICAgb25SZXNpemUoKTogdm9pZDtcbiAgICBwcml2YXRlIGFjdGl2YXRlUGluY2hHZXN0dXJlO1xuICAgIHByaXZhdGUgcmVzaXplQ3JvcHBlclBvc2l0aW9uO1xuICAgIHJlc2V0Q3JvcHBlclBvc2l0aW9uKCk6IHZvaWQ7XG4gICAga2V5Ym9hcmRBY2Nlc3MoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGFuZ2VLZXlib2FyZFN0ZXBTaXplO1xuICAgIHByaXZhdGUga2V5Ym9hcmRNb3ZlQ3JvcHBlcjtcbiAgICBwcml2YXRlIGdldFBvc2l0aW9uRm9yS2V5O1xuICAgIHByaXZhdGUgZ2V0SW52ZXJ0ZWRQb3NpdGlvbkZvcktleTtcbiAgICBwcml2YXRlIGdldEV2ZW50Rm9yS2V5O1xuICAgIHN0YXJ0TW92ZShldmVudDogYW55LCBtb3ZlVHlwZTogTW92ZVR5cGVzLCBwb3NpdGlvbj86IHN0cmluZyB8IG51bGwpOiB2b2lkO1xuICAgIHN0YXJ0UGluY2goZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgbW92ZUltZyhldmVudDogYW55KTogdm9pZDtcbiAgICBvblBpbmNoKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0TWF4U2l6ZTtcbiAgICBwcml2YXRlIHNldENyb3BwZXJTY2FsZWRNaW5TaXplO1xuICAgIHByaXZhdGUgc2V0Q3JvcHBlclNjYWxlZE1pbldpZHRoO1xuICAgIHByaXZhdGUgc2V0Q3JvcHBlclNjYWxlZE1pbkhlaWdodDtcbiAgICBwcml2YXRlIGNoZWNrQ3JvcHBlclBvc2l0aW9uO1xuICAgIG1vdmVTdG9wKCk6IHZvaWQ7XG4gICAgcGluY2hTdG9wKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBtb3ZlO1xuICAgIHByaXZhdGUgcmVzaXplO1xuICAgIHByaXZhdGUgY2hlY2tBc3BlY3RSYXRpbztcbiAgICBwcml2YXRlIGRvQXV0b0Nyb3A7XG4gICAgY3JvcCgpOiBJbWFnZUNyb3BwZWRFdmVudCB8IG51bGw7XG4gICAgcHJpdmF0ZSBnZXRJbWFnZVBvc2l0aW9uO1xuICAgIHByaXZhdGUgZ2V0T2Zmc2V0SW1hZ2VQb3NpdGlvbjtcbiAgICBwcml2YXRlIGNyb3BUb0Jhc2U2NDtcbiAgICBwcml2YXRlIGdldFF1YWxpdHk7XG4gICAgcHJpdmF0ZSBnZXRSZXNpemVSYXRpbztcbiAgICBwcml2YXRlIGdldENsaWVudFg7XG4gICAgcHJpdmF0ZSBnZXRDbGllbnRZO1xufVxuIl19